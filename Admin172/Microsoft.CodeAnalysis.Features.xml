<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.CodeAnalysis.Features</name>
    </assembly>
    <members>
        <member name="M:Microsoft.CodeAnalysis.AddMissingReference.AbstractAddMissingReferenceCodeFixProvider`1.FindNodes(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Diagnostic)">
            <summary>
            Find all the identifier names in the given location, any of these could be the symbols triggering the diagnostic.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddMissingReference.AbstractAddMissingReferenceCodeFixProvider`1.GetTypesForNodes(Microsoft.CodeAnalysis.SemanticModel,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)">
            <summary>
            Get all of the symbols we can for the given nodes since we have no way to determine up front which symbol is triggering the error.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddMissingReference.AbstractAddMissingReferenceCodeFixProvider`1.GetTypesFromSymbol(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Look for additional symbols related to the symbol that we have.
            All of these are candidates for the IErrorTypeSymbol that is causing the missing assembly reference.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.AddMissingReference.AbstractAddMissingReferenceCodeFixProvider`1.GetAssemblyIdentity(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ITypeSymbol},System.String)">
            <summary>
            Look for the first error type symbol that has a valid containing assembly.
            This is how the missing assembly error is triggered by the compiler, 
            so it is safe to assume if this case exists for one of the symbols given 
            it is the assembly we want to add.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ChangeSignature.AbstractChangeSignatureService.GetInvocationSymbol(Microsoft.CodeAnalysis.Document,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Determines the symbol on which we are invoking ReorderParameters
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ChangeSignature.AbstractChangeSignatureService.FindNodeToUpdate(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Given a SyntaxNode for which we want to reorder parameters/arguments, find the 
            SyntaxNode of a kind where we know how to reorder parameters/arguments.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ChangeSignature.DelegateInvokeMethodReferenceFinder">
            <summary>
            For ChangeSignature, FAR on a delegate invoke method must cascade to BeginInvoke, 
            cascade through method group conversions, and discover implicit invocations that do not
            mention the string "Invoke" or the delegate type itself. This implementation finds these
            symbols by binding most identifiers and invocation expressions in the solution. 
            </summary>
            <remarks>
            TODO: Rewrite this to track backward through references instead of binding everything
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixContextExtensions.RegisterFixes(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CodeActions.CodeAction},Microsoft.CodeAnalysis.Diagnostic)">
            <summary>
            Use this helper to register multiple fixes (<paramref name="actions"/>) each of which addresses / fixes the same supplied <paramref name="diagnostic"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixContextExtensions.RegisterFixes(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CodeActions.CodeAction},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic})">
            <summary>
            Use this helper to register multiple fixes (<paramref name="actions"/>) each of which addresses / fixes the same set of supplied <paramref name="diagnostics"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.FixMultipleCodeAction">
            <summary>
            Fix multiple occurrences code action.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.FixAllCodeAction">
            <summary>
            Fix all occurrences code action.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFix"/>es supplied by a given fix provider
            (such as <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider"/> or <see cref="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.ISuppressionFixProvider"/>).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixCollection.FixAllContext">
            <summary>
            Optional fix all context, which is non-null if the given <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixCollection.Provider"/> supports fix all occurrences code fix.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.FixAllCodeActionContext">
            <summary>
            FixAll context with some additional information specifically for <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllCodeAction"/>.
            </summary>
            <summary>
            FixAll context with some additional information specifically for <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllCodeAction"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeFixes.FixAllCodeActionContext.FixAllDiagnosticProvider._getDocumentDiagnosticsAsync">
            <summary>
            Delegate to fetch diagnostics for any given document within the given fix all scope.
            This delegate is invoked by <see cref="M:Microsoft.CodeAnalysis.CodeFixes.FixAllCodeActionContext.FixAllDiagnosticProvider.GetDocumentDiagnosticsAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)"/> with the given <see cref="F:Microsoft.CodeAnalysis.CodeFixes.FixAllCodeActionContext.FixAllDiagnosticProvider._diagnosticIds"/> as arguments.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.CodeFixes.FixAllCodeActionContext.FixAllDiagnosticProvider._getProjectDiagnosticsAsync">
            <summary>
            Delegate to fetch diagnostics for any given project within the given fix all scope.
            This delegate is invoked by <see cref="M:Microsoft.CodeAnalysis.CodeFixes.FixAllCodeActionContext.FixAllDiagnosticProvider.GetProjectDiagnosticsAsync(Microsoft.CodeAnalysis.Project,System.Threading.CancellationToken)"/> and <see cref="M:Microsoft.CodeAnalysis.CodeFixes.FixAllCodeActionContext.FixAllDiagnosticProvider.GetAllDiagnosticsAsync(Microsoft.CodeAnalysis.Project,System.Threading.CancellationToken)"/>
            with the given <see cref="F:Microsoft.CodeAnalysis.CodeFixes.FixAllCodeActionContext.FixAllDiagnosticProvider._diagnosticIds"/> as arguments.
            The boolean argument to the delegate indicates whether or not to return location-based diagnostics, i.e.
            (a) False => Return only diagnostics with <see cref="P:Microsoft.CodeAnalysis.Location.None"/>.
            (b) True => Return all project diagnostics, regardless of whether or not they have a location.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllCodeActionContext.GetContextForScopeAndActionId(Microsoft.CodeAnalysis.CodeFixes.FixAllScope,System.String)">
            <summary>
            Transforms this context into the public <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllContext"/> to be used for <see cref="M:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider.GetFixAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllContext)"/> invocation.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo">
            <summary>
            Contains computed information for a given <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider"/>, such as supported diagnostic Ids and supported <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllScope"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo.Create(System.Object)">
            <summary>
            Gets an optional <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo"/> for the given code fix provider or suppression fix provider.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo.CreateWithCodeFixer(Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider)">
            <summary>
            Gets an optional <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo"/> for the given code fix provider.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo.CreateWithSuppressionFixer(Microsoft.CodeAnalysis.CodeFixes.Suppression.ISuppressionFixProvider)">
            <summary>
            Gets an optional <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProviderInfo"/> for the given suppression fix provider.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IFixMultipleOccurrencesService.ComputeAndApplyFix(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}},Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider,Microsoft.CodeAnalysis.CodeFixes.FixAllProvider,System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Computes the fix muliple occurrences code fix for the given diagnostics with source locations, brings up the preview changes dialog for the fix and
            apply the code action operations corresponding to the fix.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IFixMultipleOccurrencesService.GetFix(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}},Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider,Microsoft.CodeAnalysis.CodeFixes.FixAllProvider,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the fix muliple occurrences code fix for the given diagnostics with source locations.
            NOTE: This method does not apply the fix to the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IFixMultipleOccurrencesService.ComputeAndApplyFix(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.Project,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}},Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider,Microsoft.CodeAnalysis.CodeFixes.FixAllProvider,System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Computes the fix muliple occurrences code fix for the given diagnostics without any source location, brings up the preview changes dialog for the fix and
            apply the code action operations corresponding to the fix.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IFixMultipleOccurrencesService.GetFix(System.Collections.Immutable.ImmutableDictionary{Microsoft.CodeAnalysis.Project,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}},Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider,Microsoft.CodeAnalysis.CodeFixes.FixAllProvider,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the fix muliple occurrences code fix for the given diagnostics with source locations.
            NOTE: This method does not apply the fix to the workspace.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.ICodeFixProviderFactory">
            <summary>
            CodeFixProvider factory. if an analyzer reference implements this, we call this to get CodeFixProviders
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IFixAllGetFixesService.GetFixAllOperationsAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllProvider,Microsoft.CodeAnalysis.CodeFixes.FixAllContext,System.String,System.String,System.Boolean)">
            <summary>
            Computes the fix all occurrences code fix, brings up the preview changes dialog for the fix and
            returns the code action operations corresponding to the fix.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.IFixAllGetFixesService.GetFixAllChangedSolutionAsync(Microsoft.CodeAnalysis.CodeFixes.FixAllProvider,Microsoft.CodeAnalysis.CodeFixes.FixAllContext,System.String,System.String)">
            <summary>
            Computes the fix all occurrences code fix and returns the changed solution.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.IPragmaBasedCodeAction">
            <summary>
            Suppression code action based on pragma add/remove/edit.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.PragmaBatchFixHelpers">
            <summary>
            Helper methods for pragma suppression add/remove batch fixers.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.PragmaHelpers">
            <summary>
            Helper methods for pragma based suppression code actions.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.RemoveSuppressionCodeAction">
            <summary>
            Base type for remove suppression code actions.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.RemoveSuppressionCodeAction.BatchFixer">
            <summary>
            Batch fixer for pragma suppression removal code action.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.RemoveSuppressionCodeAction.AttributeRemoveAction">
            <summary>
            Code action to remove suppress message attributes for remove suppression.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.RemoveSuppressionCodeAction.PragmaRemoveAction">
            <summary>
            Code action to edit/remove/add the pragma directives for removing diagnostic suppression.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider.PragmaWarningBatchFixAllProvider">
            <summary>
            Batch fixer for pragma suppress code action.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.ExportSuppressionFixProviderAttribute">
            <summary>
            Use this attribute to declare a <see cref="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.ISuppressionFixProvider"/> implementation so that it can be discovered by the host.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.Suppression.ExportSuppressionFixProviderAttribute.Name">
            <summary>
            The name of the <see cref="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.ISuppressionFixProvider"/>.  
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeFixes.Suppression.ExportSuppressionFixProviderAttribute.Languages">
            <summary>
            The source languages this provider can provide fixes for.  See <see cref="T:Microsoft.CodeAnalysis.LanguageNames"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.Suppression.ISuppressionFixProvider.CanBeSuppressedOrUnsuppressed(Microsoft.CodeAnalysis.Diagnostic)">
            <summary>
            Returns true if the given diagnostic can be suppressed or unsuppressed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.Suppression.ISuppressionFixProvider.GetSuppressionsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)">
            <summary>
            Gets one or more add suppression or remove suppression fixes for the specified diagnostics represented as a list of <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>'s.
            </summary>
            <returns>A list of zero or more potential <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFix"/>'es. It is also safe to return null if there are none.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.Suppression.ISuppressionFixProvider.GetSuppressionsAsync(Microsoft.CodeAnalysis.Project,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)">
            <summary>
            Gets one or more add suppression or remove suppression fixes for the specified no-location diagnostics represented as a list of <see cref="T:Microsoft.CodeAnalysis.CodeActions.CodeAction"/>'s.
            </summary>
            <returns>A list of zero or more potential <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFix"/>'es. It is also safe to return null if there are none.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.Suppression.ISuppressionFixProvider.GetFixAllProvider">
            <summary>
            Gets an optional <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider"/> that can fix all/multiple occurrences of diagnostics fixed by this fix provider.
            Return null if the provider doesn't support fix all/multiple occurrences.
            Otherwise, you can return any of the well known fix all providers from <see cref="T:Microsoft.CodeAnalysis.CodeFixes.WellKnownFixAllProviders"/> or implement your own fix all provider.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContextExtensions.RegisterRefactorings(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CodeActions.CodeAction})">
            <summary>
            Use this helper to register multiple refactorings (<paramref name="actions"/>).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoring">
            <summary>
            Represents a set of transformations that can be applied to a piece of code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoring.Actions">
            <summary>
            List of possible actions that can be used to transform the code.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeRefactorings.ICodeRefactoring">
            <summary>
            For testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.AbstractCompletionService.GetCultureSpecificQuirks(System.String)">
            <summary>
            Apply any culture-specific quirks to the given text for the purposes of pattern matching.
            For example, in the Turkish locale, capital 'i's should be treated specially in Visual Basic.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Glyph">
            <summary>
            An appropriate icon to present to the user for this completion item.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.CompletionProvider">
            <summary>
            The ICompletionProvider that this CompletionItem was created from.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.DisplayText">
            <summary>
            The text for the completion item should be presented to the user (for example, in a
            completion list in an IDE).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.FilterText">
            <summary>
            Text to compare against when filtering completion items against user entered text.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.SortText">
            <summary>
            A string that is used for comparing completion items so that they can be ordered.  This
            is often the same as the DisplayText but may be different in certain circumstances.  For
            example, in C# a completion item with the display text "@int" might have the sort text
            "int" so that it would appear next to other items with similar names instead of
            appearing before, or after all the items due to the leading @ character.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.Preselect">
            <summary>
            Whether or not this item should be preselected when presented to the user.  It is up to
            the ICompletionRules to determine how this flag should be handled.  However, the default
            behavior is that, if there has been no filter text then a preselected item is preferred
            over any other item. If there has been filter text supplied, then a preselected item is
            preferred over another item if the ICompletionRules currently in effect deem them
            otherwise identical.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.FilterSpan">
            <summary>
            The span(respective to the original document text when this completion item was created)
            to use for determining what text should be used to filter this completion item against.
            Most commonly this is the same text span that is in TextChange, however in specialized
            cases it can be different.  For example, in C#, if a user types "foo." the item "operator
            int" may be placed in the list.  It's filter span will be created a after the dot
            position (so that typing "oper" will help filter down to the list of operators).
            However, the text change may extend further backward so that if that item is committed
            the resultant text becomes "((int)foo).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.IsBuilder">
            <summary>
            A CompletionItem marked as a builder will be presented as an Intellisense Builder,
            initially with its display text, which will be replaced as the user types.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.ShowsWarningIcon">
            <summary>
            When this property is true, the completion list will display a warning icon to the
            right of the item's text, indicating that the corresponding symbol may not be
            available in every project a linked file is linked into.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionItem.ShouldFormatOnCommit">
            <summary>
            When this property is true, after performing the action associated with the item, 
            formatting is performed on the change
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItem.GetDescriptionAsync(System.Threading.CancellationToken)">
            <summary>
            A description to present to the user for this completion item.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItemRules.GetTextChange(Microsoft.CodeAnalysis.Completion.CompletionItem,System.Nullable{System.Char},System.String)">
            <summary>
            The text change that will be made when this item is committed.  The text change includes
            both the span of text to replace (respective to the original document text when this
            completion item was created) and the text to replace it with.  The span will be adjusted
            automatically by the completion engine to fit on the current text using "EdgeInclusive"
            semantics.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItemRules.IsCommitCharacter(Microsoft.CodeAnalysis.Completion.CompletionItem,System.Char,System.String)">
            <summary>
            Returns true if the character is one that can commit the specified completion item. A
            character will be checked to see if it should filter an item.  If not, it will be checked
            to see if it should commit that item.  If it does neither, then completion will be
            dismissed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItemRules.IsFilterCharacter(Microsoft.CodeAnalysis.Completion.CompletionItem,System.Char,System.String)">
            <summary>
            Returns true if the character typed should be used to filter the specified completion
            item.  A character will be checked to see if it should filter an item.  If not, it will be
            checked to see if it should commit that item.  If it does neither, then completion will
            be dismissed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionItemRules.SendEnterThroughToEditor(Microsoft.CodeAnalysis.Completion.CompletionItem,System.String,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Returns true if the enter key that was typed should also be sent through to the editor
            after committing the provided completion item.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionList">
            <summary>
            A completion list to be presented to the user.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionList.IsExclusive">
            <summary>
            True if this list is exclusive.  If a list is exclusive, then only those items in that
            group list will be presented to the user.  If a list is non-exclusive, then all other
            completion providers will be asked to augment the list of items it has provided.
            
            If multiple lists are marked as exclusive, only the first one returned from a provider
            will be used.  Providers can be ordered using the OrderAttribute.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionList.Items">
            <summary>
            The completion items to present to the user.  Can not be empty.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionList.Builder">
            <summary>
            A completion builder to present to the user.  Can be null if no builder need be
            presented.  A builder is generally useful when the location in source where completion is
            requested represents a place where both completion items can be offered, and new items
            can be declared.  By offering a builder the user has the option of declaring a new item
            in an unimpeded manner.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionService.GetCompletionListAsync(Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.Completion.CompletionTriggerInfo,Microsoft.CodeAnalysis.Options.OptionSet,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Completion.CompletionListProvider},System.Threading.CancellationToken)">
            <summary>
            Returns the <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionList"/> for the specified <paramref name="position"/>
            in the <paramref name="document"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionService.IsCompletionTriggerCharacterAsync(Microsoft.CodeAnalysis.Document,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Completion.CompletionListProvider},System.Threading.CancellationToken)">
            <summary>
            Returns true if the character at the specific position in the text snapshot should
            trigger completion. Implementers of this will be called on the main UI thread and should
            only do minimal textual checks to determine if they should be presented.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionTriggerInfo">
            <summary>
            Provides information about what triggered completion.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionTriggerInfo.TriggerReason">
            <summary>
            Provides the reason that completion was triggered.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.CompletionTriggerInfo.TriggerCharacter">
            <summary>
            If the <see cref="P:Microsoft.CodeAnalysis.Completion.CompletionTriggerInfo.TriggerReason"/> was <see
            cref="F:Microsoft.CodeAnalysis.Completion.CompletionTriggerReason.TypeCharCommand"/> then this was the character that was
            typed or deleted by backspace.  Otherwise it is null.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionTriggerReason.InvokeCompletionCommand">
            <summary>
            Completion was triggered through the 'Invoke Completion' command
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionTriggerReason.TypeCharCommand">
            <summary>
            Completion was triggered through the 'Type Char' command.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionTriggerReason.BackspaceOrDeleteCommand">
            <summary>
            Completion was triggered through the 'Backspace' command or the 'Delete' command.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Completion.CompletionTriggerReason.Snippets">
            <summary>
            Completion was triggered to show the list of Snippets.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.ICompletionService.GetDefaultCompletionProviders">
            <summary>
            Returns the default set of completion providers for this completion service.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.ICompletionService.GetCompletionRules">
            <summary>
            Returns the set of completion rules for this completion service.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.ICompletionService.ClearMRUCache">
            <summary>
            Clears the most-recently-used cache used by completion.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.ICompletionService.GetCompletionListAsync(Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.Completion.CompletionTriggerInfo,Microsoft.CodeAnalysis.Options.OptionSet,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Completion.CompletionListProvider},System.Threading.CancellationToken)">
            <summary>
            Returns the <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionList"/> for the specified position in the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.ICompletionService.IsTriggerCharacter(Microsoft.CodeAnalysis.Text.SourceText,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Completion.CompletionListProvider},Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Returns true if the character at the specific position in the document should trigger
            completion.
            </summary>   
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.ICompletionService.GetDefaultTrackingSpanAsync(Microsoft.CodeAnalysis.Document,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the default tracking span, based on the language, that providers are likely to use.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.ICompletionService.GetSnippetExpansionNoteForCompletionItemAsync(Microsoft.CodeAnalysis.Completion.CompletionItem,Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Returns a string that should be added to the description of the given completion item
            if a snippet exists with a shortcut that matches the completion item's insertion text.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.ICompletionService.DismissIfEmpty">
            <summary>
            True if the completion list should be dismissed if the user's typing causes it to filter
            and display no items.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.ICompletionService.SupportSnippetCompletionListOnTab">
            <summary>
            True if typing ?[tab] should try to show the list of available snippets.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Completion.ICompletionService.DismissIfLastFilterCharacterDeleted">
            <summary>
            True if the list should be dismissed when the user deletes the last character in the filter span.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.Providers.AbstractObjectCreationCompletionProvider.GetObjectCreationNewExpression(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Return null if not in object creation type context.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItemsAsync(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.AbstractSyntaxContext,System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.ISymbol,System.Collections.Generic.List{Microsoft.CodeAnalysis.ProjectId}},System.Collections.Generic.List{Microsoft.CodeAnalysis.ProjectId},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Given a list of symbols, creates the list of completion items for them.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItems(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.AbstractSyntaxContext},System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.ISymbol,System.Collections.Generic.List{Microsoft.CodeAnalysis.ProjectId}},System.Collections.Generic.List{Microsoft.CodeAnalysis.ProjectId},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Given a list of symbols, and a mapping from each symbol to its original SemanticModel, creates the list of completion items for them.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.CreateItem(Roslyn.Utilities.ValueTuple{System.String,System.String},System.Int32,System.Collections.Generic.List{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.AbstractSyntaxContext,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.ISymbol,System.Collections.Generic.List{Microsoft.CodeAnalysis.ProjectId}},System.Collections.Generic.List{Microsoft.CodeAnalysis.ProjectId},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Given a Symbol, creates the completion item for it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.Providers.AbstractSymbolCompletionProvider.FindSymbolsMissingInLinkedContexts(System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.ISymbol},System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Shared.Extensions.ContextQuery.AbstractSyntaxContext,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ISymbol}}})">
            <summary>
            Given a list of symbols, determine which are not recommended at the same position in linked documents.
            </summary>
            <param name="expectedSymbols">The symbols recommended in the active context.</param>
            <param name="linkedContextSymbolLists">The symbols recommended in linked documents</param>
            <returns>The list of projects each recommended symbol did NOT appear in.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Completion.CompletionListProvider">
            <summary>
            Extensibility interface for clients who want to participate in completion inside an editor.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionListProvider.ProduceCompletionListAsync(Microsoft.CodeAnalysis.Completion.CompletionListContext)">
            <summary>
            Implement to register the items and other details for a <see cref="T:Microsoft.CodeAnalysis.Completion.CompletionList"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionListProvider.IsTriggerCharacter(Microsoft.CodeAnalysis.Text.SourceText,System.Int32,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Returns true if the character at the specific position in the text snapshot should
            trigger completion. Implementers of this will be called on the main UI thread and should
            only do minimal textual checks to determine if they should be presented.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.MatchesFilterText(Microsoft.CodeAnalysis.Completion.CompletionItem,System.String,Microsoft.CodeAnalysis.Completion.CompletionTriggerInfo,Microsoft.CodeAnalysis.Completion.CompletionFilterReason)">
            <summary>
            Returns true if the completion item matches the filter text typed so far.  Returns 'true'
            iff the completion item matches and should be included in the filtered completion
            results, or false if it should not be.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.IsBetterFilterMatch(Microsoft.CodeAnalysis.Completion.CompletionItem,Microsoft.CodeAnalysis.Completion.CompletionItem,System.String,Microsoft.CodeAnalysis.Completion.CompletionTriggerInfo,Microsoft.CodeAnalysis.Completion.CompletionFilterReason)">
            <summary>
            Returns true if item1 is a better completion item than item2 given the provided filter
            text, or false if it is not better.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.ShouldSoftSelectItem(Microsoft.CodeAnalysis.Completion.CompletionItem,System.String,Microsoft.CodeAnalysis.Completion.CompletionTriggerInfo)">
            <summary>
            Returns true if the completion item should be "soft" selected, or false if it should be "hard"
            selected.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.CompletionItemCommitted(Microsoft.CodeAnalysis.Completion.CompletionItem)">
            <summary>
            Called by completion engine when a completion item is committed.  Completion rules can
            use this information to affect future calls to MatchesFilterText or IsBetterFilterMatch.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.ItemsMatch(Microsoft.CodeAnalysis.Completion.CompletionItem,Microsoft.CodeAnalysis.Completion.CompletionItem)">
            <summary>
            Returns true if item1 and item2 are similar enough that only one should be shown in the completion list; otherwise, false.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.GetTextChange(Microsoft.CodeAnalysis.Completion.CompletionItem,System.Nullable{System.Char},System.String)">
            <summary>
            The text change that will be made when this item is committed.  The text change includes
            both the span of text to replace (respective to the original document text when this
            completion item was created) and the text to replace it with.  The span will be adjusted
            automatically by the completion engine to fit on the current text using "EdgeInclusive"
            semantics.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.IsCommitCharacter(Microsoft.CodeAnalysis.Completion.CompletionItem,System.Char,System.String)">
            <summary>
            Returns true if the character is one that can commit the specified completion item. A
            character will be checked to see if it should filter an item.  If not, it will be checked
            to see if it should commit that item.  If it does neither, then completion will be
            dismissed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.IsFilterCharacter(Microsoft.CodeAnalysis.Completion.CompletionItem,System.Char,System.String)">
            <summary>
            Returns true if the character typed should be used to filter the specified completion
            item.  A character will be checked to see if it should filter an item.  If not, it will be
            checked to see if it should commit that item.  If it does neither, then completion will
            be dismissed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Completion.CompletionRules.SendEnterThroughToEditor(Microsoft.CodeAnalysis.Completion.CompletionItem,System.String,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Returns true if the enter key that was typed should also be sent through to the editor
            after committing the provided completion item.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerHelper.CreateAnalyzerExceptionDiagnostic(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Exception)">
            <summary>
            Create a diagnostic for exception thrown by the given analyzer.
            </summary>
            <remarks>
            Keep this method in sync with "AnalyzerExecutor.CreateAnalyzerExceptionDiagnostic".
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.AbstractHostDiagnosticUpdateSource">
            <summary>
            Diagnostic update source for reporting workspace host specific diagnostics,
            which may not be related to any given project/document in the solution.
            For example, these include diagnostics generated for exceptions from third party analyzers.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerUpdateArgsId">
            <summary>
            Base type of a type that is used as <see cref="P:Microsoft.CodeAnalysis.Common.UpdatedEventArgs.Id"/> for live diagnostic
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzerPackage">
            <summary>
            Information on vsix that contains diagnostic analyzers
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSourceRegistrationService">
            <summary>
            A service that let people to register new IDiagnosticUpdateSource
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSourceRegistrationService.Register(Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSource)">
            <summary>
            Register new IDiagnosticUpdateSource
            
            Currently, it doesn't support unregister since our event is asynchronous and unregistering source that deal with asynchronous event is not straight forward.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.SynchronizeWithBuildAsync(Microsoft.CodeAnalysis.Project,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticData})">
            <summary>
            Synchronize build errors with live error.
            
            no cancellationToken since this can't be cancelled
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.SynchronizeWithBuildAsync(Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticData})">
            <summary>
            Synchronize build errors with live error
            
            no cancellationToken since this can't be cancelled
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.ProjectAnalyzerReferenceChangedEventArgs">
            <summary>
            EventArgs for <see cref="E:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager.ProjectAnalyzerReferenceChanged"/>
            
            this event args contains information such as <see cref="F:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.ProjectAnalyzerReferenceChangedEventArgs.Project"/> the <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> has changed
            and what <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/> has changed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager">
            <summary>
            This is in charge of anything related to <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.DiagnosticState"/>
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager.ProjectAnalyzerReferenceChanged">
            <summary>
            This will be raised whenever <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager"/> finds <see cref="P:Microsoft.CodeAnalysis.Project.AnalyzerReferences"/> change
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager.GetAnalyzers(Microsoft.CodeAnalysis.Project)">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s for the given <see cref="T:Microsoft.CodeAnalysis.Project"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager.GetStateSets(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/>s for the given <see cref="T:Microsoft.CodeAnalysis.ProjectId"/>. 
            This will never create new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/> but will return ones already created.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager.GetStateSets(Microsoft.CodeAnalysis.Project)">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/>s for the given <see cref="T:Microsoft.CodeAnalysis.Project"/>.
            This will never create new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/> but will return ones already created.
            Difference with <see cref="M:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager.GetStateSets(Microsoft.CodeAnalysis.ProjectId)"/> is that 
            this will only return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/>s that have same language as <paramref name="project"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager.GetOrUpdateStateSets(Microsoft.CodeAnalysis.Project)">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/>s for the given <see cref="T:Microsoft.CodeAnalysis.Project"/>. 
            This will either return already created <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/>s for the specific snapshot of <see cref="T:Microsoft.CodeAnalysis.Project"/> or
            It will create new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/>s for the <see cref="T:Microsoft.CodeAnalysis.Project"/> and update internal state.
            
            since this has a side-effect, this should never be called concurrently. and incremental analyzer (solution crawler) should guarantee that.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager.GetOrCreateStateSets(Microsoft.CodeAnalysis.Project)">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/>s for the given <see cref="T:Microsoft.CodeAnalysis.Project"/>. 
            This will either return already created <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/>s for the specific snapshot of <see cref="T:Microsoft.CodeAnalysis.Project"/> or
            It will create new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/>s for the <see cref="T:Microsoft.CodeAnalysis.Project"/>.
            Unlike <see cref="M:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager.GetOrUpdateStateSets(Microsoft.CodeAnalysis.Project)"/>, this has no side effect.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager.GetOrCreateStateSet(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/> for the given <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> in the context of <see cref="T:Microsoft.CodeAnalysis.Project"/>.
            This will either return already created <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/> for the specific snapshot of <see cref="T:Microsoft.CodeAnalysis.Project"/> or
            It will create new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet"/> for the <see cref="T:Microsoft.CodeAnalysis.Project"/>.
            This will not have any side effect.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager.RemoveStateSet(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Remove given <see cref="T:Microsoft.CodeAnalysis.ProjectId"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager.HostStates">
            <summary>
            This class is responsible for anything related to <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.DiagnosticState"/> for host level <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateManager.ProjectStates">
            <summary>
            This class is responsible for anything related to <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.DiagnosticState"/> for project level <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet">
            <summary>
            this contains all states regarding a <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>
            
            use <see cref="M:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet.GetState(Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateType)"/> to retrieve specific <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateType"/> of <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.DiagnosticState"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateSet.GetNameAndVersion(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.StateType)">
            <summary>
            Get the unique state name for the given {type, analyzer} tuple.
            Note that this name is used by the underlying persistence stream of the corresponding <see cref="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.DiagnosticState"/> to Read/Write diagnostic data into the stream.
            If any two distinct {type, analyzer} tuples have the same diagnostic state name, we will end up sharing the persistence stream between them, leading to duplicate/missing/incorrect diagnostic data.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.EngineV1.DiagnosticIncrementalAnalyzer.AnalyzerExecutor">
            <summary>
            AnalyzerExecutor returns analyzed data without side effect. 
            it might uses cache to skip unnecessary duplicate analysis, but it will never update any internal state such as state
            
            this is not finished form. as refactoring going on, this class will become more stateless in respect to caller, and less dependency on owner.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.BuildToolId">
            <summary>
            Support ErrorSource information.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager">
            <summary>
            This owns every information about analyzer itself 
            such as <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>, <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> and <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/>.
            
            people should use this to get <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s or <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/>s of a <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>.
            this will do appropriate de-duplication and cache for those information.
            
            this should be always thread-safe.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._hostDiagnosticAnalyzerPackages">
            <summary>
            This contains vsix info on where <see cref="T:Microsoft.CodeAnalysis.Diagnostics.HostDiagnosticAnalyzerPackage"/> comes from.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._hostAnalyzerReferencesMap">
            <summary>
            Key is analyzer reference identity <see cref="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetAnalyzerReferenceIdentity(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)"/>.
            
            We use the key to de-duplicate analyzer references if they are referenced from multiple places.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._hostDiagnosticAnalyzersPerLanguageMap">
            <summary>
            Key is the language the <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> supports and key for the second map is analyzer reference identity and
            <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> for that assembly reference.
            
            Entry will be lazily filled in.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._lazyHostDiagnosticAnalyzersPerReferenceMap">
            <summary>
            Key is analyzer reference identity <see cref="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetAnalyzerReferenceIdentity(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)"/>.
            
            Value is set of <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> that belong to the <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>.
            
            We populate it lazily. otherwise, we will bring in all analyzers preemptively
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._hostDiagnosticUpdateSource">
            <summary>
            Host diagnostic update source for analyzer host specific diagnostics.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._compilerDiagnosticAnalyzerMap">
            <summary>
            map to compiler diagnostic analyzer.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._hostDiagnosticAnalyzerPackageNameMap">
            <summary>
            map from host diagnostic analyzer to package name it came from
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._compilerDiagnosticAnalyzerDescriptorMap">
            <summary>
            map to compiler diagnostic analyzer descriptor.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager._descriptorCache">
            <summary>
            Cache from <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> instance to its supported desciptors.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetAnalyzerReferenceIdentity(Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference)">
            <summary>
            It returns a string that can be used as a way to de-duplicate <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.CreateAnalyzerReferencesMap(Microsoft.CodeAnalysis.Project)">
            <summary>
            It returns a map with <see cref="P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.Id"/> as key and <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> as value
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetDiagnosticDescriptors(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Return <see cref="P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.SupportedDiagnostics"/> of given <paramref name="analyzer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.IsAnalyzerSuppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Project)">
            <summary>
            Return true if the given <paramref name="analyzer"/> is suppressed for the given project.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetHostDiagnosticAnalyzersPerReference(System.String)">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> identity and <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s map for given <paramref name="language"/>
            </summary> 
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetHostDiagnosticDescriptorsPerReference">
            <summary>
            Create <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> identity and <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/>s map
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.CreateDiagnosticDescriptorsPerReference(Microsoft.CodeAnalysis.Project)">
            <summary>
            Create <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> identity and <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/>s map for given <paramref name="project"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.CreateDiagnosticAnalyzersPerReference(Microsoft.CodeAnalysis.Project)">
            <summary>
            Create <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> identity and <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s map for given <paramref name="project"/> that
            includes both host and project analyzers
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.CreateProjectDiagnosticAnalyzersPerReference(Microsoft.CodeAnalysis.Project)">
            <summary>
            Create <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/> identity and <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s map for given <paramref name="project"/> that
            has only project analyzers
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.CreateDiagnosticAnalyzers(Microsoft.CodeAnalysis.Project)">
            <summary>
            Create <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s collection for given <paramref name="project"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.IsCompilerDiagnostic(System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticData)">
            <summary>
            Check whether given <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticData"/> belong to compiler diagnostic analyzer
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetCompilerDiagnosticAnalyzer(System.String)">
            <summary>
            Return compiler <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> for the given language.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.IsCompilerDiagnosticAnalyzer(System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Check whether given <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> is compiler analyzer for the language or not.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.HostAnalyzerManager.GetDiagnosticAnalyzerPackageName(System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Get Name of Package (vsix) which Host <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> is from.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.AnalyzeDocumentAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Analyze a single document such that local diagnostics for that document become available,
            prioritizing analyzing this document over analyzing the rest of the project.
            Calls <see cref="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.RaiseDiagnosticsUpdated(System.Object,Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs)"/> for each
            unique group of diagnostics, where a group is identified by analysis classification (syntax/semantics), document, and analyzer.
            </summary>
            <param name="document">The document to analyze.</param>
            <param name="bodyOpt">If present, indicates a portion (e.g. a method body) of the document to analyze.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.AnalyzeProjectAsync(Microsoft.CodeAnalysis.Project,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Analyze a single project such that diagnostics for the entire project become available.
            Calls <see cref="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.RaiseDiagnosticsUpdated(System.Object,Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs)"/> for each
            unique group of diagnostics, where a group is identified by analysis classification (project), project, and analyzer.
            </summary>
            <param name="project">The project to analyze.</param>
            <param name="semanticsChanged">Indicates a change to the declarative semantics of the project.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.AnalyzeSyntaxAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Apply syntax tree actions (that have not already been applied) to a document.
            Calls <see cref="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.RaiseDiagnosticsUpdated(System.Object,Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs)"/> for each
            unique group of diagnostics, where a group is identified by analysis classification (syntax), document, and analyzer.
            </summary>
            <param name="document">The document to analyze.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.DocumentOpenAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Respond to a document being opened for editing in the host.
            </summary>
            <param name="document">The opened document.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.DocumentCloseAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Respond to a document being closed in the host.
            </summary>
            <param name="document">The closed document.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.DocumentResetAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Flush cached diagnostics produced by a prior analysis of a document. 
            This will be called in a case where we need to re-analyze a document without textual, syntactic or semantic change of a solution.
            For example, engine or analyzer's option changes.
            </summary>
            <param name="document">The document whose diagnostics are to be flushed.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.NewSolutionSnapshotAsync(Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            ???
            </summary>
            <param name="solution">The solution.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.RemoveDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Flush diagnostics produced by a prior analysis of a document,
            and suppress future analysis of the document.
            Calls <see cref="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.RaiseDiagnosticsUpdated(System.Object,Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs)"/> with an empty collection.
            </summary>
            <param name="documentId"></param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.RemoveProject(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Flush diagnostics produced by a prior analysis of a project,
            and suppress future analysis of the project.
            Calls <see cref="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.RaiseDiagnosticsUpdated(System.Object,Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs)"/> with an empty collection.
            </summary>
            <param name="projectId"></param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.GetSpecificCachedDiagnosticsAsync(Microsoft.CodeAnalysis.Solution,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get previously-computed (and potentially stale) diagnostics associated with a particular combination of
            analysis classification (syntax/semantics/project), document/project, and analyzer.
            </summary>
            <param name="solution">The solution.</param>
            <param name="id">Matched against values supplied in a <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs"/> to <see cref="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.RaiseDiagnosticsUpdated(System.Object,Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs)"/>.</param>
            <param name="includeSuppressedDiagnostics">Flag indicating whether diagnostics with source suppressions (pragma/SuppressMessageAttribute) should be included.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.GetCachedDiagnosticsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get previously-computed (and potentially stale) diagnostics associated with a particular document, project, or solution.
            </summary>
            <param name="solution">The solution. If projectId and documentId are both null, returned diagnostics are for the entire solution.</param>
            <param name="projectId">If projectId is non null and documentId is null, returned diagnostics are for that project only.</param>
            <param name="documentId">If documentId is non null, returned diagnostics are for that document only.</param>
            <param name="includeSuppressedDiagnostics">Flag indicating whether diagnostics with source suppressions (pragma/SuppressMessageAttribute) should be included.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.GetSpecificDiagnosticsAsync(Microsoft.CodeAnalysis.Solution,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get diagnostics associated with a particular combination of
            analysis classification (syntax/semantics/project), document/project, and analyzer.
            </summary>
            <param name="solution">The solution.</param>
            <param name="id">Matched against values supplied in a <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs"/> to <see cref="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.RaiseDiagnosticsUpdated(System.Object,Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedArgs)"/>.</param>
            <param name="includeSuppressedDiagnostics">Flag indicating whether diagnostics with source suppressions (pragma/SuppressMessageAttribute) should be included.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.GetDiagnosticsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get diagnostics associated with a particular document, project, or solution.
            </summary>
            <param name="solution">The solution. If projectId and documentId are both null, returned diagnostics are for the entire solution.</param>
            <param name="projectId">If projectId is non null and documentId is null, returned diagnostics are for that project only.</param>
            <param name="documentId">If documentId is non null, returned diagnostics are for that document only.</param>
            <param name="includeSuppressedDiagnostics">Flag indicating whether diagnostics with source suppressions (pragma/SuppressMessageAttribute) should be included.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.GetDiagnosticsForIdsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Collections.Immutable.ImmutableHashSet{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get diagnostics matching one of a set of diagnostic IDs associated with a particular document, project, or solution.
            </summary>
            <param name="solution">The solution. If projectId and documentId are both null, returned diagnostics are for the entire solution.</param>
            <param name="projectId">If projectId is non null and documentId is null, returned diagnostics are for that project only.</param>
            <param name="documentId">If documentId is non null, returned diagnostics are for that document only.</param>
            <param name="diagnosticIds">The diagnostic IDs to match.</param>
            <param name="includeSuppressedDiagnostics">Flag indicating whether diagnostics with source suppressions (pragma/SuppressMessageAttribute) should be included.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.GetProjectDiagnosticsForIdsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get diagnostics matching one of a set of diagnostic IDs that are not associated with a particular document.
            </summary>
            <param name="solution">The solution. If projectId is null, returned diagnostics are for the entire solution.</param>
            <param name="projectId">If projectId is non null, returned diagnostics are for that project only.</param>
            <param name="diagnosticIds">The diagnostic IDs to match.</param>
            <param name="includeSuppressedDiagnostics">Flag indicating whether diagnostics with source suppressions (pragma/SuppressMessageAttribute) should be included.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.TryAppendDiagnosticsForSpanAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Generic.List{Microsoft.CodeAnalysis.Diagnostics.DiagnosticData},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add diagnostics local to a span to a list of diagnostics.
            </summary>
            <param name="document">The document containing the span.</param>
            <param name="range">The span for which to produce diagnostics.</param>
            <param name="diagnostics">The list of diagnostics to be augmented.</param>
            <param name="includeSuppressedDiagnostics">Flag indicating whether diagnostics with source suppressions (pragma/SuppressMessageAttribute) should be included.</param>
            <param name="cancellationToken"></param>
            <returns>True if the set of results is complete, false if getting a complete set requires running per-document actions.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.GetDiagnosticsForSpanAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get diagnostics local to a span.
            </summary>
            <param name="document">The document containing the span.</param>
            <param name="range">The span for which to produce diagnostics.</param>
            <param name="includeSuppressedDiagnostics">Flag indicating whether diagnostics with source suppressions (pragma/SuppressMessageAttribute) should be included.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.SynchronizeWithBuildAsync(Microsoft.CodeAnalysis.Project,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticData})">
            <summary>
            Callback from build listener.
            
            Given diagnostics are errors host got from explicit build.
            It is up to each incremental analyzer how they will merge this information with live diagnostic info.
            
            this API doesn't have cancellationToken since it can't be cancelled.
            
            given diagnostics are project wide diagnostics that doesn't contain a source location.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.BaseDiagnosticIncrementalAnalyzer.SynchronizeWithBuildAsync(Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticData})">
            <summary>
            Callback from build listener.
            
            Given diagnostics are errors host got from explicit build.
            It is up to each incremental analyzer how they will merge this information with live diagnostic info
            
            this API doesn't have cancellationToken since it can't be cancelled.
            
            given diagnostics are ones that has a source location.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticCustomTags.s_microsoftCustomTags">
            <summary>
            it is string[] because DiagnosticDescriptor expects string[]. 
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedKind.DiagnosticsRemoved">
            <summary>
            Called when the diagnostic analyzer engine decides to remove existing diagnostics.
            For example, this can happen when a document is removed from a solution.  In that
            case the analyzer engine will delete all diagnostics associated with that document.
            Any layers caching diagnostics should listen for these events to know when to 
            delete their cached items entirely.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticsUpdatedKind.DiagnosticsCreated">
            <summary>
            Called when a new set of (possibly empty) diagnostics have been produced.  This
            happens through normal editing and processing of files as diagnostic analyzers
            produce new diagnostics for documents and projects.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IAnalyzerDriverService.ComputeDeclarationsInSpan(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Text.TextSpan,System.Boolean,System.Collections.Generic.List{Microsoft.CodeAnalysis.DeclarationInfo},System.Threading.CancellationToken)">
            <summary>
            Computes the <see cref="T:Microsoft.CodeAnalysis.DeclarationInfo"/> for all the declarations whose span overlaps with the given <paramref name="span"/>.
            </summary>
            <param name="model">The semantic model for the document.</param>
            <param name="span">Span to get declarations.</param>
            <param name="getSymbol">Flag indicating whether <see cref="P:Microsoft.CodeAnalysis.DeclarationInfo.DeclaredSymbol"/> should be computed for the returned declaration infos.
            If false, then <see cref="P:Microsoft.CodeAnalysis.DeclarationInfo.DeclaredSymbol"/> is always null.</param>
            <param name="builder">Builder to add computed declarations.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.IBuiltInAnalyzer">
            <summary>
            This interface is a marker for all the analyzers that are built in.
            We will record non-fatal-watson if any analyzer with this interface throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.Reanalyze(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectId},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId})">
            <summary>
            re-analyze given projects and documents
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetSpecificCachedDiagnosticsAsync(Microsoft.CodeAnalysis.Workspace,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            get specific diagnostics currently stored in the source. returned diagnostic might be out-of-date if solution has changed but analyzer hasn't run for the new solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetCachedDiagnosticsAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            get diagnostics currently stored in the source. returned diagnostic might be out-of-date if solution has changed but analyzer hasn't run for the new solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetSpecificDiagnosticsAsync(Microsoft.CodeAnalysis.Solution,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            get specific diagnostics for the given solution. all diagnostics returned should be up-to-date with respect to the given solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetDiagnosticsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            get diagnostics for the given solution. all diagnostics returned should be up-to-date with respect to the given solution.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetDiagnosticsForIdsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Collections.Immutable.ImmutableHashSet{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            get diagnostics of the given diagnostic ids from the given solution. all diagnostics returned should be up-to-date with respect to the given solution.
            Note that for project case, this method returns diagnostics from all project documents as well. Use <see cref="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetProjectDiagnosticsForIdsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{System.String},System.Boolean,System.Threading.CancellationToken)"/>
            if you want to fetch only project diagnostics without source locations.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetProjectDiagnosticsForIdsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableHashSet{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            get project diagnostics (diagnostics with no source location) of the given diagnostic ids from the given solution. all diagnostics returned should be up-to-date with respect to the given solution.
            Note that this method doesn't return any document diagnostics. Use <see cref="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetDiagnosticsForIdsAsync(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Collections.Immutable.ImmutableHashSet{System.String},System.Boolean,System.Threading.CancellationToken)"/> to also fetch those.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.TryAppendDiagnosticsForSpanAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Generic.List{Microsoft.CodeAnalysis.Diagnostics.DiagnosticData},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            try to return up to date diagnostics for the given span for the document.
            
            it will return true if it was able to return all up-to-date diagnostics.
             otherwise, false indicating there are some missing diagnostics in the diagnostic list
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetDiagnosticsForSpanAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            return up to date diagnostics for the given span for the document
            
            this can be expensive since it is force analyzing diagnostics if it doesn't have up-to-date one yet.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetDiagnosticDescriptors(Microsoft.CodeAnalysis.Project)">
            <summary>
            Gets a list of the diagnostics that are provided by this service.
            If the given <paramref name="projectOpt"/> is non-null, then gets the diagnostics for the project.
            Otherwise, returns the global set of diagnostics enabled for the workspace.
            </summary>
            <returns>A mapping from analyzer name to the diagnostics produced by that analyzer</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetDiagnosticDescriptors(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Gets a list of the diagnostics provided by the given <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>.
            </summary>
            <returns>A list of the diagnostics produced by the given analyzer</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.IsCompilerDiagnostic(System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticData)">
            <summary>
            Check whether given diagnostic is compiler diagnostic or not
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.GetCompilerDiagnosticAnalyzer(System.String)">
            <summary>
            Get compiler analyzer for the given language
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService.IsCompilerDiagnosticAnalyzer(System.String,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer)">
            <summary>
            Check whether given <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> is compiler analyzer for the language or not.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticService.DiagnosticsUpdated">
            <summary>
            Event to get notified as new diagnostics are discovered by IDiagnosticUpdateSource
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticService.GetDiagnostics(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get current diagnostics stored in IDiagnosticUpdateSource
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticService.GetDiagnosticsUpdatedEventArgs(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Threading.CancellationToken)">
            <summary>
            Get current UpdatedEventArgs stored in IDiagnosticUpdateSource
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSource">
            <summary>
            Implement this to participate in diagnostic service framework as one of diagnostic update source
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSource.DiagnosticsUpdated">
            <summary>
            Raise this when new diagnostics are found
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSource.SupportGetDiagnostics">
            <summary>
            Return true if the source supports GetDiagnostics API otherwise, return false so that the engine can cache data from DiagnosticsUpdated in memory
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSource.GetDiagnostics(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get diagnostics stored in the source
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IWorkspaceDiagnosticAnalyzerProviderService.GetHostDiagnosticAnalyzerPackages">
            <summary>
            Gets the analyzers shared across the entire workspace session.
            This includes the analyzers included through VSIX installations.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.IWorkspaceDiagnosticAnalyzerProviderService.GetAnalyzerAssemblyLoader">
            <summary>
            Gets the loader for VSIX based analyzer assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.ISupportLiveUpdate">
            <summary>
            Marker interface to indicate whether given diagnostic args are from live analysis.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.WorkspaceAnalyzerOptions">
            <summary>
            Analyzer options with workspace.
            These are used to fetch the workspace options by our internal analyzers (e.g. simplification analyzer).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.DocumentDiagnosticAnalyzer">
            <summary>
            IDE-only document based diagnostic analyzer.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.ProjectDiagnosticAnalyzer">
            <summary>
            IDE-only project based diagnostic analyzer.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.None">
            <summary>
            Invalid value, analyzer must support at least one or more of the subsequent analysis categories.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.SyntaxAnalysis">
            <summary>
            Analyzer reports syntax diagnostics (i.e. registers a SyntaxTree action).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.SemanticSpanAnalysis">
            <summary>
            Analyzer reports semantic diagnostics and also supports incremental span based method body analysis.
            An analyzer can support incremental method body analysis if edits within a method body only affect the diagnostics reported by the analyzer on the edited method body.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.SemanticDocumentAnalysis">
            <summary>
            Analyzer reports semantic diagnostics but doesn't support incremental span based method body analysis.
            It needs to re-analyze the whole document for reporting semantic diagnostics even for method body editing scenarios.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerCategory.ProjectAnalysis">
            <summary>
            Analyzer reports project diagnostics (i.e. registers a Compilation action and/or Compilation end action diagnostics).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Common.UpdatedEventArgs.Id">
            <summary>
            The identity of update group. 
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Common.UpdatedEventArgs.Workspace">
            <summary>
            Workspace this update is associated with
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Common.UpdatedEventArgs.ProjectId">
            <summary>
            projectId this update is associated with
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Common.UpdatedEventArgs.DocumentId">
            <summary>
            documentId this update is associated with
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditAndContinue.TraceLog">
            <summary>
            Fixed size rolling tracing log. 
            </summary>
            <remarks>
            Recent entries are captured in a memory dump.
            If DEBUG is defined, all entries written to <see cref="M:Microsoft.CodeAnalysis.EditAndContinue.TraceLog.DebugWrite(System.String)"/> or
            <see cref="M:Microsoft.CodeAnalysis.EditAndContinue.TraceLog.DebugWrite(System.String,System.Object[])"/> are print to <see cref="T:System.Diagnostics.Debug"/> output.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.FindMemberDeclaration(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Finds a member declaration node containing given active statement node.
            </summary>
            <remarks>
            The implementation has to decide what kinds of nodes in top-level match relationship represent a declaration.
            Every member declaration must be represented by exactly one node, but not all nodes have to represent a declaration.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetDeclarationBody(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)">
            <summary>
            If the specified node represents a member declaration returns a node that represents its body,
            i.e. a node used as the root of statement-level match.
            </summary>
            <param name="node">A node representing a declaration or a top-level edit node.</param>
            <param name="isMember">
            True if <paramref name="isMember"/> represents a member declaration,
            false if it represents an edit node.</param>
            <returns>
            Returns null for nodes that don't represent declarations.
            </returns>
            <remarks>
            The implementation has to decide what kinds of nodes in top-level match relationship represent a declaration.
            Every member declaration must be represented by exactly one node, but not all nodes have to represent a declaration.
            
            If a member doesn't have a body (null is returned) it can't have associated active statements.
            
            Body does not need to cover all active statements that may be associated with the member. 
            E.g. Body of a C# constructor is the method body block. Active statements may be placed on the base constructor call.
                 Body if a VB field declaration with shared AsNew initializer is the New expression. Active statements might be placed on the field variables.
            <see cref="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.FindStatementAndPartner(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode@,System.Int32@)"/> has to account for such cases.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetDeclarationBodyEdit(Microsoft.CodeAnalysis.Differencing.Edit{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Differencing.EditKind},Microsoft.CodeAnalysis.SyntaxNode@,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Interprets an edit as a declaration body edit.
            </summary>
            <param name="edit">A top-level edit.</param>
            <param name="editMap">All top-level edits by syntax node.</param>
            <param name="oldBody">The old body participating in the edit.</param>
            <param name="newBody">The new body participating in the edit.</param>
            <returns>
            True if the specified edit is a declaration body edit, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetActiveTokens(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            If the specified node represents a member declaration returns all tokens of the member declaration
            that might be covered by an active statement.
            </summary>
            <returns>
            Tokens covering all possible breakpoint spans associated with the member, 
            or null if the specified node doesn't represent a member declaration or 
            doesn't have a body that can contain active statements.
            </returns>
            <remarks>
            The implementation has to decide what kinds of nodes in top-level match relationship represent a declaration.
            Every member declaration must be represented by exactly one node, but not all nodes have to represent a declaration.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetEncompassingAncestor(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns an ancestor that encompasses all active and statement level 
            nodes that belong to the member represented by <paramref name="bodyOrMatchRootOpt"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.FindStatementAndPartner(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode@,System.Int32@)">
            <summary>
            Finds a statement at given position and a declaration body.
            Also returns the corresponding partner statement in <paramref name="partnerDeclarationBodyOpt"/>, if specified.
            </summary>
            <remarks>
            The declaration body node may not contain the <paramref name="position"/>. 
            This happens when an active statement associated with the member is outside of its body (e.g. C# constructor).
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.FindPartner(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Maps <paramref name="leftNode"/> descendant of <paramref name="leftRoot"/> to corresponding descendant node
            of <paramref name="rightRoot"/>, assuming that the trees only differ in trivia
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.FindEnclosingLambdaBody(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns a node that represents a body of a lambda containing specified <paramref name="node"/>,
            or null if the node isn't contained in a lambda. If a node is returned it must uniquely represent the lambda,
            i.e. be no two distinct nodes may represent the same lambda.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetLambdaBodyExpressionsAndStatements(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Given a node that represents a lambda body returns all nodes of the body in a syntax list.
            </summary>
            <remarks>
            Note that VB lambda bodies are represented by a lambda header and that some lambda bodies share 
            their parent nodes with other bodies (e.g. join clause expressions).
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryMatchActiveStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Matches old active statement to new active statement without constructing full method body match.
            This is needed for active statements that are outside of method body, like constructor initializer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetActiveSpan(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.Text.TextSpan@)">
            <summary>
            Get the active span that corresponds to specified node (or its part).
            </summary>
            <returns>
            True if the node has an active span associated with it, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.EnumerateNearStatements(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Yields potential active statements around the specified active statement
            starting with siblings following the statement, then preceding the statement, follows with its parent, its following siblings, etc.
            </summary>
            <returns>
            Pairs of (node, statement part), or (node, -1) indicating there is no logical following statement.
            The enumeration continues until the root is reached.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Determines if two syntax nodes are the same, disregarding trivia differences.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.AreEquivalentActiveStatements(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Int32)">
            <summary>
            Returns true if the code emitted for the old active statement part (<paramref name="statementPart"/> of <paramref name="oldStatement"/>) 
            is the same as the code emitted for the corresponding new active statement part (<paramref name="statementPart"/> of <paramref name="newStatement"/>). 
            </summary>
            <remarks>
            A rude edit is reported if an active statement is changed and this method returns true.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetCapturedVariables(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Analyzes data flow in the member body represented by the specified node and returns all captured variables and parameters (including "this").
            If the body is a field/property initializer analyzes the initializer expression only.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.GetVariableUseSites(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            Enumerates all use sites of a specified variable within the specified syntax subtrees.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.HasParameterClosureScope(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns true if the parameters of the symbol are lifted into a scope that is different from the symbol's body.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetLambdaBodies(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode@,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Returns all lambda bodies of a node representing a lambda, 
            or false if the node doesn't represent a lambda.
            </summary>
            <remarks>
            C# anonymous function expression and VB lambda expression both have a single body
            (in VB the body is the header of the lambda expression).
            
            Some lambda queries (group by, join by) have two bodies.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.IsDeclarationWithInitializer(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Return true if the declaration is a field/property declaration with an initializer. 
            Shall return false for enum members.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.IsConstructorWithMemberInitializers(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Return true if the declaration is a constructor declaration to which field/property initializers are emitted. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.ComputeMap(Microsoft.CodeAnalysis.Differencing.Match{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.ActiveNode[],System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.LambdaInfo}@,System.Collections.Generic.List{Microsoft.CodeAnalysis.EditAndContinue.RudeEditDiagnostic})">
            <summary>
            Calculates a syntax map of the entire method body including all lambda bodies it contains (recursively).
            Internal for testing.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.AbstractEditAndContinueAnalyzer.TryGetMatchingAncestor(System.Collections.Generic.IReadOnlyDictionary{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode@)">
            <summary>
            Finds the inner-most ancestor of the specified node that has a matching node in the new tree.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags.LeafFrame">
            <summary>
            The statement is in a leaf frame.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags.PartiallyExecuted">
            <summary>
            The statement is partially executed.
            </summary>
            <remarks>
            An active statement is partially executed if the thread is stopped in between two sequence points.
            This may happen when the users steps through the code in disassembly window (stepping over machine instructions),
            when the compiler emits a call to Debugger.Break (VB Stop statement), etc.
            
            Partially executed active statement can't be edited.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementFlags.NonUserCode">
            <summary>
            The statement IL is not in user code.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditAndContinue.DebuggingSession">
            <summary>
            Represents a debugging session.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.ActiveStatements">
            <summary>
            Spans of active statements in the document, or null if the document has syntax errors.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.RudeEditErrors">
            <summary>
            Diagnostics for rude edits in the document, or null if the document is unchanged or has syntax errors.
            If the compilation has semantic errors only syntactic rude edits are calculated.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.SemanticEdits">
            <summary>
            Edits made in the document, or null if the document is unchanged, has syntax errors, has rude edits,
            or if the compilation has semantic errors.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.ExceptionRegions">
             <summary>
             Exception regions -- spans of catch and finally handlers that surround the active statements.
             
             Null if the document has syntax errors or rude edits, or if the compilation has semantic errors.
             </summary>
             <remarks>
             Null if there are any rude edit diagnostics.
             
             Otherwise, each active statement in <see cref="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.ActiveStatements"/> has a corresponding slot in <see cref="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.ExceptionRegions"/>.
            
             Exception regions for each EH block/clause are marked as |...|.
               try { ... AS ... } |catch { } finally { }|
               try { } |catch { ... AS ... }| finally { }
               try { } catch { } |finally { ... AS ... }|
             
             Contains a minimal set of spans that cover the handlers.
             For example:
               try { } |finally { try { ... AS ... } catch {  } }|
               try { } |finally { try { } catch { ... AS ... } }|
             </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults.LineEdits">
            <summary>
            Line edits in the document, or null if the document has syntax errors or rude edits, 
            or if the compilation has semantic errors.
            </summary>
            <remarks>
            Sorted by <see cref="F:Microsoft.CodeAnalysis.EditAndContinue.LineChange.OldLine"/>
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.DocumentAnalysisResults._hasCompilationErrors">
            <summary>
            The compilation has compilation errors (syntactic or semantic), 
            or null if the document doesn't have any modifications and
            presence of compilation errors was not determined.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.EditSession._stoppedAtException">
            <summary>
            Stopped at exception, an unwind is required before EnC is allowed. All edits are rude.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.EditAndContinue.IActiveStatementTrackingService.TrackingSpansChanged">
            <summary>
            Triggered when tracking spans have changed.
            </summary>
            <remarks>
            The argument is true if the leaf active statement may have changed. 
            It might be true even if it didn't, but it's not false if it does.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.IActiveStatementTrackingService.UpdateActiveStatementSpans(Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.CodeAnalysis.EditAndContinue.ActiveStatementId,Microsoft.CodeAnalysis.Text.TextSpan}})">
            <summary>
            Replaces the existing tracking spans with specified active statement spans.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectAnalysisSummary.NoChanges">
            <summary>
            Project hasn't been changed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectAnalysisSummary.CompilationErrors">
            <summary>
            Project contains syntactic and/or semantic errors.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectAnalysisSummary.RudeEdits">
            <summary>
            Project contains rude edits.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectAnalysisSummary.ValidInsignificantChanges">
            <summary>
            The project only changed in comments, whitespaces, etc. that don't require compilation.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectAnalysisSummary.ValidChanges">
            <summary>
            The project contains valid changes that require application of a delta.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectReadOnlyReason.None">
            <summary>
            Project module was successfully loaded into the debuggee process when edit session started and is editable.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectReadOnlyReason.MetadataNotAvailable">
            <summary>
            Project hasn't been built at the time debugging session started (or the binary is unreadable).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.ProjectReadOnlyReason.NotLoaded">
            <summary>
            One of the following reasons
            - Module wasn't loaded into the debuggee process when edit session started.
            - The debugger has been attached to an already running process.
            - The code being debugged was optimized at build or runtime.
            - The assembly being debugged is loaded as domain-neutral.
            - The assembly being debugged is runtime-generated (Reflection.Emit).
            - IntelliTrace is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.SessionReadOnlyReason.None">
            <summary>
            The project is editable.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.SessionReadOnlyReason.Running">
            <summary>
            The program is running. No edits allowed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.EditAndContinue.SessionReadOnlyReason.StoppedAtException">
            <summary>
            The program is stopped at exception. No edits allowed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtractMethod.OperationStatusFlag">
            <summary>
            status code for extract method operations
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ExtractMethod.OperationStatusFlag.Succeeded">
            <summary>
            operation has succeeded
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ExtractMethod.OperationStatusFlag.Suggestion">
            <summary>
            operation has succeeded with a span that is different than original span
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ExtractMethod.OperationStatusFlag.BestEffort">
            <summary>
            operation has failed but can provide some best effort result
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.Extensions.GetTokenWithAnnotation(Microsoft.CodeAnalysis.SemanticDocument,Microsoft.CodeAnalysis.SyntaxAnnotation)">
            <summary>
            get tokens with given annotation in current document
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.Extensions.ResolveType``1(Microsoft.CodeAnalysis.SemanticModel,``0)">
            <summary>
            resolve the given symbol against compilation this snapshot has
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.Extensions.HasDiagnostics(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            check whether node contains error for itself but not from its child node
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.Succeeded">
            <summary>
            True if the extract method operation succeeded.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.SucceededWithSuggestion">
            <summary>
            True if the extract method operation is possible if the original span is adjusted.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.Document">
            <summary>
            The transformed document that was produced as a result of the extract method operation.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.Reasons">
            <summary>
            The reasons why the extract method operation did not succeed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.MethodDeclarationNode">
            <summary>
            the generated method node that contains the extracted code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.InvocationNameToken">
            <summary>
            The name token for the invocation node that replaces the extracted code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult.Status">
            <summary>
            internal status of result. more fine grained reason why it is failed. 
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtractMethod.ITriviaSavedResult">
            <summary>
            contains information to restore trivia later on to the annotated tree
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.ITriviaSavedResult.Root">
            <summary>
            root node of the annotated tree.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.ITriviaSavedResult.RestoreTrivia(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ExtractMethod.AnnotationResolver,Microsoft.CodeAnalysis.ExtractMethod.TriviaResolver)">
            <summary>
            restore saved trivia to given tree
            </summary>
            <param name="root">root node to the annotated tree</param>
            <param name="annotationResolver">it provides a custom way of resolving annotations to retrieve right tokens to attach trivia</param>
            <param name="triviaResolver">it provides a custom way of creating trivia list between two tokens</param>
            <returns>root node to a trivia restored tree</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtractMethod.ISyntaxTriviaService">
            <summary>
            syntax trivia related services
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.ISyntaxTriviaService.SaveTriviaAroundSelection(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            save trivia around span and let user restore trivia later
            </summary>
            <param name="root">root node of a tree</param>
            <param name="textSpan">selection whose trivia around its edges will be saved</param>
            <returns>object that holds onto enough information to restore trivia later</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetFlowAnalysisNodeRange">
            <summary>
            convert text span to node range for the flow analysis API
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.ContainsReturnStatementInSelectedCode(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            check whether selection contains return statement or not
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.CreateFromSymbol(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.ExtractMethod.VariableStyle,System.Boolean)">
            <summary>
            create VariableInfo type
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetIndexOfVariableInfoToUseAsReturnValue(System.Collections.Generic.IList{Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.VariableInfo})">
            <summary>
            among variables that will be used as parameters at the extracted method, check whether one of the parameter can be used as return
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetRangeVariableType(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.IRangeVariableSymbol)">
            <summary>
            get type of the range variable symbol
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.ReadOnlyFieldAllowed">
            <summary>
            check whether the selection is at the placed where read-only field is allowed to be extracted out
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.AnalyzerResult.UseInstanceMember">
            <summary>
            used to determine whether static can be used
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.AnalyzerResult.EndOfSelectionReachable">
            <summary>
            used to determine whether "return" statement needs to be inserted
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.AnalyzerResult.SemanticDocument">
            <summary>
            document this result is based on
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.AnalyzerResult.AwaitTaskReturn">
            <summary>
            flag to show whether task return type is due to await
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.AnalyzerResult.ReturnType">
            <summary>
            return type
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.AnalyzerResult.Status">
            <summary>
            analyzer result operation status
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.VariableSymbol">
            <summary>
            temporary symbol until we have a symbol that can hold onto both local and parameter symbol
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.VariableSymbol.OriginalTypeHadAnonymousTypeOrDelegate">
            <summary>
            return true if original type had anonymous type or delegate somewhere in the type
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.VariableSymbol.OriginalType">
            <summary>
            get the original type with anonymous type removed
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ExtractMethod.OperationStatus.Create``1(Microsoft.CodeAnalysis.ExtractMethod.OperationStatus,``0)">
            <summary>
            create operation status with the given data
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtractMethod.OperationStatus`1">
            <summary>
            operation status paired with data
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ExtractMethod.SelectionResult">
            <summary>
            clean up this code when we do selection validator work.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FeaturesResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AccessingCapturedVariableInLambda">
            <summary>
              Looks up a localized string similar to Accessing captured variable &apos;{0}&apos; that hasn&apos;t been accessed before in {1} will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ActionsCanNotBeEmpty">
            <summary>
              Looks up a localized string similar to Actions can not be empty..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddingAAroundAnActiveStatement">
            <summary>
              Looks up a localized string similar to Adding &apos;{0}&apos; around an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddingAbstractOrOverride">
            <summary>
              Looks up a localized string similar to Adding an abstract &apos;{0}&apos; or overriding an inherited &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddingAGeneric">
            <summary>
              Looks up a localized string similar to Adding a generic &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddingAMethodBodyWillPrevent">
            <summary>
              Looks up a localized string similar to Adding a method body will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddingANewFile">
            <summary>
              Looks up a localized string similar to Adding a new file will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddingAnImportedMethod">
            <summary>
              Looks up a localized string similar to Adding an imported method will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddingAWillPreventTheDebugSession">
            <summary>
              Looks up a localized string similar to Adding &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddingAWithTheHandlesClause">
            <summary>
              Looks up a localized string similar to Adding &apos;{0}&apos; with the Handles clause will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddingExternMember">
            <summary>
              Looks up a localized string similar to Adding an extern &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddingInto">
            <summary>
              Looks up a localized string similar to Adding &apos;{0}&apos; into a &apos;{1}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddingIntoClassWithExplicitOrSequential">
            <summary>
              Looks up a localized string similar to Adding &apos;{0}&apos; into a class with explicit or sequential layout will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddingMustOverrideOrOverrides">
            <summary>
              Looks up a localized string similar to Adding a MustOverride &apos;{0}&apos; or overriding an inherited &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddingUserDefinedOperator">
            <summary>
              Looks up a localized string similar to Adding a user defined &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddOptionalParametersTo">
            <summary>
              Looks up a localized string similar to Add optional parameters to &apos;{0}({1})&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddParametersTo">
            <summary>
              Looks up a localized string similar to Add parameters to &apos;{0}({1})&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddProjectReferenceTo">
            <summary>
              Looks up a localized string similar to Add project reference to &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AddReferenceTo">
            <summary>
              Looks up a localized string similar to Add reference to &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AnActiveStatementHasBeenRemoved">
            <summary>
              Looks up a localized string similar to An active statement has been removed from its original method. You must revert your changes to continue or restart the debugging session..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AnonymousTypes">
            <summary>
              Looks up a localized string similar to Anonymous Types:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ArgumentCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Argument cannot be empty..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ArgumentElementCannotBeNull">
            <summary>
              Looks up a localized string similar to Argument cannot have a null element..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Assembly">
            <summary>
              Looks up a localized string similar to Assembly.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AssigningToReadonlyFields">
            <summary>
              Looks up a localized string similar to Assigning to readonly fields must be done in a constructor : [{0}]..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AsyncMethodWithRefOutParameters">
            <summary>
              Looks up a localized string similar to Asynchronous method cannot have ref/out parameters : [{0}].
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AttemptToConnectToProcess">
            <summary>
              Looks up a localized string similar to Attempt to connect to process #{0} failed, retrying ....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Attribute">
            <summary>
              Looks up a localized string similar to attribute.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.AutoProperty">
            <summary>
              Looks up a localized string similar to auto-property.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Available">
            <summary>
              Looks up a localized string similar to Available.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.BuildToolBuild">
            <summary>
              Looks up a localized string similar to Compiler.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.BuildToolEnC">
            <summary>
              Looks up a localized string similar to Edit And Continue.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.BuildToolLive">
            <summary>
              Looks up a localized string similar to Live.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.CannotResolveReference">
            <summary>
              Looks up a localized string similar to Cannot resolve reference &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.CantNotConstructFinalTree">
            <summary>
              Looks up a localized string similar to can&apos;t not construct final tree.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.CapturingVariable">
            <summary>
              Looks up a localized string similar to Capturing variable &apos;{0}&apos; that hasn&apos;t been captured before will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.CategoryCompiler">
            <summary>
              Looks up a localized string similar to Compiler.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.CategoryEditAndContinue">
            <summary>
              Looks up a localized string similar to Edit and Continue.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.CategoryStyle">
            <summary>
              Looks up a localized string similar to Style.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ChangeSignature">
            <summary>
              Looks up a localized string similar to Change signature....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ChangeTo">
            <summary>
              Looks up a localized string similar to Change &apos;{0}&apos; to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ChangingCapturedVariableScope">
            <summary>
              Looks up a localized string similar to Changing the declaration scope of a captured variable &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ChangingCapturedVariableType">
            <summary>
              Looks up a localized string similar to Changing the type of a captured variable &apos;{0}&apos; previously of type &apos;{1}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ChangingLambdaParameters">
            <summary>
              Looks up a localized string similar to Changing the parameters of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ChangingLambdaReturnType">
            <summary>
              Looks up a localized string similar to Changing the return type of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ChangingQueryLambdaType">
            <summary>
              Looks up a localized string similar to Changing the type of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ChangingTheConstraintFromTo">
            <summary>
              Looks up a localized string similar to Changing the constraint from &apos;{0}&apos; to &apos;{1}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ChangingVisibilityOfConstructor">
            <summary>
              Looks up a localized string similar to Changing visibility of a constructor will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Class">
            <summary>
              Looks up a localized string similar to class.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ComputingFixAllOccurrences">
            <summary>
              Looks up a localized string similar to Computing fix all occurrences code fix....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Constant">
            <summary>
              Looks up a localized string similar to constant.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ConstField">
            <summary>
              Looks up a localized string similar to const field.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Constructor">
            <summary>
              Looks up a localized string similar to constructor.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ContainsAnonymousType">
            <summary>
              Looks up a localized string similar to Parameters&apos; type or return type cannot be an anonymous type : [{0}].
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.CouldNotExtractInterfaceSelection">
            <summary>
              Looks up a localized string similar to Could not extract interface: The selection is not inside a class/interface/struct..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.CouldNotExtractInterfaceTypeMember">
            <summary>
              Looks up a localized string similar to Could not extract interface: The type does not contain any member that can be extracted to an interface..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Delegate">
            <summary>
              Looks up a localized string similar to delegate.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.DeleteLambdaWithMultiScopeCapture">
            <summary>
              Looks up a localized string similar to Removing &apos;{0}&apos; that accessed captured variables &apos;{1}&apos; and &apos;{2}&apos; declared in different scopes will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.DeletingAAroundAnActiveStatement">
            <summary>
              Looks up a localized string similar to Deleting &apos;{0}&apos; around an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.DeletingAMethodBodyWillPrevent">
            <summary>
              Looks up a localized string similar to Deleting a method body will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.DeletingAWillPrevent">
            <summary>
              Looks up a localized string similar to Deleting &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.DeletingCapturedVariable">
            <summary>
              Looks up a localized string similar to Deleting captured variable &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.DisposeManagedStateTodo">
            <summary>
              Looks up a localized string similar to TODO: dispose managed state (managed objects)..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.EditAndContinue">
            <summary>
              Looks up a localized string similar to Edit and Continue.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.EncapsulateField">
            <summary>
              Looks up a localized string similar to Encapsulate field: &apos;{0}&apos; (but still use field).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.EncapsulateFields">
            <summary>
              Looks up a localized string similar to Encapsulate fields (but still use field).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.EncapsulateFieldsUsages">
            <summary>
              Looks up a localized string similar to Encapsulate fields (and use property).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.EncapsulateFieldUsages">
            <summary>
              Looks up a localized string similar to Encapsulate field: &apos;{0}&apos; (and use property).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Enum">
            <summary>
              Looks up a localized string similar to enum.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.EnumValue">
            <summary>
              Looks up a localized string similar to enum value.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ErrorCategory">
            <summary>
              Looks up a localized string similar to Roslyn.HostError.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ErrorOrUnknownType">
            <summary>
              Looks up a localized string similar to The selection contains an error or unknown type..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Event">
            <summary>
              Looks up a localized string similar to event.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.EventAccessor">
            <summary>
              Looks up a localized string similar to event accessor.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Exceptions">
            <summary>
              Looks up a localized string similar to Exceptions:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ExtractInterface">
            <summary>
              Looks up a localized string similar to Extract Interface....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ExtractMethod">
            <summary>
              Looks up a localized string similar to Extract Method.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ExtractMethodFailedWithUnknownReasons">
            <summary>
              Looks up a localized string similar to Unknown error occurred.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ExtractMethodLocal">
            <summary>
              Looks up a localized string similar to Extract Method + Local.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.FailedToCreateARemoteProcess">
            <summary>
              Looks up a localized string similar to Failed to create a remote process for interactive code execution..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.FailedToInitializeRemoteInteractiveProcess">
            <summary>
              Looks up a localized string similar to Failed to initialize remote interactive process..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.FailedToLaunchProcess">
            <summary>
              Looks up a localized string similar to Failed to launch &apos;{0}&apos; process (exit code: {1}) with output: .
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Field">
            <summary>
              Looks up a localized string similar to field.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.FixAllOccurrences">
            <summary>
              Looks up a localized string similar to Fix all occurrences.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.FixAllTitle_Document">
            <summary>
              Looks up a localized string similar to Document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.FixAllTitle_Project">
            <summary>
              Looks up a localized string similar to Project.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.FixAllTitle_Solution">
            <summary>
              Looks up a localized string similar to Solution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_0_1">
            <summary>
              Looks up a localized string similar to Generate {0} &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_0_1_in_new_file">
            <summary>
              Looks up a localized string similar to Generate {0} &apos;{1}&apos; in new file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_nested_0_1">
            <summary>
              Looks up a localized string similar to Generate nested {0} &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Generate_type">
            <summary>
              Looks up a localized string similar to Generate type.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateAbstractMethod">
            <summary>
              Looks up a localized string similar to Generate abstract method &apos;{0}&apos; in &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateAbstractProperty">
            <summary>
              Looks up a localized string similar to Generate abstract property &apos;{0}&apos; in &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateAll">
            <summary>
              Looks up a localized string similar to Generate all.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateBoth">
            <summary>
              Looks up a localized string similar to Generate Both.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateConstantIn">
            <summary>
              Looks up a localized string similar to Generate constant &apos;{0}&apos; in &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateConstructor">
            <summary>
              Looks up a localized string similar to Generate constructor &apos;{0}({1})&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GeneratedCodeIsOverlapping">
            <summary>
              Looks up a localized string similar to generated code is overlapping with hidden portion of the code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateDelegatingConstructor">
            <summary>
              Looks up a localized string similar to Generate delegating constructor &apos;{0}({1})&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateEnumMemberIn">
            <summary>
              Looks up a localized string similar to Generate enum member &apos;{0}&apos; in &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateEqualsObject">
            <summary>
              Looks up a localized string similar to Generate &apos;Equals(object)&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateFieldAssigningConstructor">
            <summary>
              Looks up a localized string similar to Generate field assigning constructor &apos;{0}({1})&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateFieldIn">
            <summary>
              Looks up a localized string similar to Generate field &apos;{0}&apos; in &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateGetHashCode">
            <summary>
              Looks up a localized string similar to Generate &apos;GetHashCode()&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateLocal">
            <summary>
              Looks up a localized string similar to Generate local &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateMethodIn">
            <summary>
              Looks up a localized string similar to Generate method &apos;{1}.{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateNewConstructorIn">
            <summary>
              Looks up a localized string similar to Generate constructor in &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateNewType">
            <summary>
              Looks up a localized string similar to Generate new type....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GeneratePropertyIn">
            <summary>
              Looks up a localized string similar to Generate property &apos;{1}.{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateReadonlyField">
            <summary>
              Looks up a localized string similar to Generate read-only field &apos;{1}.{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenerateReadonlyProperty">
            <summary>
              Looks up a localized string similar to Generate read-only property &apos;{1}.{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GeneratingSourceForSymbols">
            <summary>
              Looks up a localized string similar to generating source for symbols of this type is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenericOverload">
            <summary>
              Looks up a localized string similar to generic overload.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GenericOverloads">
            <summary>
              Looks up a localized string similar to generic overloads.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.GlobalNamespace">
            <summary>
              Looks up a localized string similar to Global Namespace.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.HostingProcessExitedWithExitCode">
            <summary>
              Looks up a localized string similar to Hosting process exited with exit code {0}..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ImplementInterface">
            <summary>
              Looks up a localized string similar to Implement interface.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ImplementInterfaceAbstractly">
            <summary>
              Looks up a localized string similar to Implement interface abstractly.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ImplementInterfaceExplicitly">
            <summary>
              Looks up a localized string similar to Implement interface explicitly.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ImplementInterfaceExplicitlyWithDisposePattern">
            <summary>
              Looks up a localized string similar to Implement interface explicitly with Dispose pattern.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ImplementInterfaceThrough">
            <summary>
              Looks up a localized string similar to Implement interface through &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ImplementInterfaceWithDisposePattern">
            <summary>
              Looks up a localized string similar to Implement interface with Dispose pattern.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.In">
            <summary>
              Looks up a localized string similar to in.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.InsertConstructorToTypeWithInitializersWithLambdas">
            <summary>
              Looks up a localized string similar to Adding a constructor to a type with a field or property initializer that contains an anonymous function will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.InsertLambdaWithMultiScopeCapture">
            <summary>
              Looks up a localized string similar to Adding &apos;{0}&apos; that accesses captured variables &apos;{1}&apos; and &apos;{2}&apos; declared in different scopes will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.InteractiveHostNotInitialized">
            <summary>
              Looks up a localized string similar to Interactive Host not initialized..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Interface">
            <summary>
              Looks up a localized string similar to interface.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.IntroduceConstantFor">
            <summary>
              Looks up a localized string similar to Introduce constant for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.IntroduceConstantForAllOccurrences">
            <summary>
              Looks up a localized string similar to Introduce constant for all occurrences of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.IntroduceFieldFor">
            <summary>
              Looks up a localized string similar to Introduce field for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.IntroduceFieldForAllOccurrences">
            <summary>
              Looks up a localized string similar to Introduce field for all occurrences of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.IntroduceLocalConstantFor">
            <summary>
              Looks up a localized string similar to Introduce local constant for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.IntroduceLocalConstantForAll">
            <summary>
              Looks up a localized string similar to Introduce local constant for all occurrences of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.IntroduceLocalFor">
            <summary>
              Looks up a localized string similar to Introduce local for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.IntroduceLocalForAllOccurrences">
            <summary>
              Looks up a localized string similar to Introduce local for all occurrences of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.IntroduceQueryVariableFor">
            <summary>
              Looks up a localized string similar to Introduce query variable for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.IntroduceQueryVariableForAll">
            <summary>
              Looks up a localized string similar to Introduce query variable for all occurrences of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Is">
            <summary>
              Looks up a localized string similar to is.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Keyword">
            <summary>
              Looks up a localized string similar to {0} Keyword.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Label">
            <summary>
              Looks up a localized string similar to label.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.LoadingContextFrom">
            <summary>
              Looks up a localized string similar to Loading context from &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.LocalConstant">
            <summary>
              Looks up a localized string similar to local constant.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.LocalVariable">
            <summary>
              Looks up a localized string similar to local variable.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.LocationUnknown">
            <summary>
              Looks up a localized string similar to location unknown.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Method">
            <summary>
              Looks up a localized string similar to method.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.MethodReferencedImplicitly">
            <summary>
              Looks up a localized string similar to Method referenced implicitly.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingACatchFinallyHandler">
            <summary>
              Looks up a localized string similar to Modifying a catch/finally handler with an active statement in the try block will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingACatchHandlerAround">
            <summary>
              Looks up a localized string similar to Modifying a catch handler around an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingAFileWithExperimentalFeaturesEnabled">
            <summary>
              Looks up a localized string similar to Modifying source with experimental language features enabled will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingAGenericMethodWillPrevent">
            <summary>
              Looks up a localized string similar to Modifying a generic method will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingAMethodInsideTheContext">
            <summary>
              Looks up a localized string similar to Modifying a method inside the context of a generic type will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingATryCatchFinally">
            <summary>
              Looks up a localized string similar to Modifying a try/catch/finally statement when the finally block is active will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingAWhichContainsComplexQuery">
            <summary>
              Looks up a localized string similar to Modifying &apos;{0}&apos; which contains an Aggregate, Group By, or Join query clauses will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingAWhichContainsOnErrorResume">
            <summary>
              Looks up a localized string similar to Modifying an active &apos;{0}&apos; which contains &apos;On Error&apos; or &apos;Resume&apos; statements will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingAWhichContainsStackalloc">
            <summary>
              Looks up a localized string similar to Modifying &apos;{0}&apos; which contains the &apos;stackalloc&apos; operator will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingAWhichContainsStaticLocal">
            <summary>
              Looks up a localized string similar to Modifying &apos;{0}&apos; which contains a static variable will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingTheInitializerInGenericType">
            <summary>
              Looks up a localized string similar to Modifying the initializer of &apos;{0}&apos; in a generic type will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingTheInitializerInPartialType">
            <summary>
              Looks up a localized string similar to Modifying the initializer of &apos;{0}&apos; in a partial type will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingTriviaInGenericMethodWillPrevent">
            <summary>
              Looks up a localized string similar to Modifying whitespace or comments in a generic &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ModifyingTriviaInMethodInsideTheContext">
            <summary>
              Looks up a localized string similar to Modifying whitespace or comments in &apos;{0}&apos; inside the context of a generic type will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.MovingAWillPreventTheDebug">
            <summary>
              Looks up a localized string similar to Moving &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Namespace">
            <summary>
              Looks up a localized string similar to namespace.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.NoActiveStatement">
            <summary>
              Looks up a localized string similar to The selection contains no active statement..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.NonInvokedMethodCannotBeReplacedWithProperty">
            <summary>
              Looks up a localized string similar to Non-invoked method cannot be replaced with property..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.NotAccessingCapturedVariableInLambda">
            <summary>
              Looks up a localized string similar to Ceasing to access captured variable &apos;{0}&apos; in {1} will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.NotAvailable">
            <summary>
              Looks up a localized string similar to Not Available.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.NotCapturingVariable">
            <summary>
              Looks up a localized string similar to Ceasing to capture variable &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.NoteTabTwiceToInsertTheSnippet">
            <summary>
              Looks up a localized string similar to Note: Tab twice to insert the &apos;{0}&apos; snippet..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.OnlyMethodsWithASingleArgumentCanBeReplacedWithAProperty">
            <summary>
              Looks up a localized string similar to Only methods with a single argument can be replaced with a property..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Operator">
            <summary>
              Looks up a localized string similar to operator.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Overload">
            <summary>
              Looks up a localized string similar to overload.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Overloads">
            <summary>
              Looks up a localized string similar to overloads.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Parameter">
            <summary>
              Looks up a localized string similar to parameter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Parameters">
            <summary>
              Looks up a localized string similar to Parameters:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.PlusAdditional">
            <summary>
              Looks up a localized string similar to  + additional {0} {1}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.PrefixTextForAwaitKeyword">
            <summary>
              Looks up a localized string similar to Awaited task returns.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ProjectAvailability">
            <summary>
              Looks up a localized string similar to     {0} - {1}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Property">
            <summary>
              Looks up a localized string similar to property.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.RangeVariable">
            <summary>
              Looks up a localized string similar to range variable.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Remarks">
            <summary>
              Looks up a localized string similar to Remarks:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.RemoveSuppressionEquivalenceKeyPrefix">
            <summary>
              Looks up a localized string similar to Remove Suppression.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.RemoveSuppressionForId">
            <summary>
              Looks up a localized string similar to Remove Suppression {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.RemoveUnnecessaryCast">
            <summary>
              Looks up a localized string similar to Remove Unnecessary Cast.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.RemovingThatContainsActiveStatement">
            <summary>
              Looks up a localized string similar to Removing &apos;{0}&apos; that contains an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.RenamingAWillPrevent">
            <summary>
              Looks up a localized string similar to Renaming &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.RenamingCapturedVariable">
            <summary>
              Looks up a localized string similar to Renaming a captured variable, from &apos;{0}&apos; to &apos;{1}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Replace0and1WithProperty">
            <summary>
              Looks up a localized string similar to Replace &apos;{0}&apos; and &apos;{1}&apos; with property.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Replace0WithProperty">
            <summary>
              Looks up a localized string similar to Replace &apos;{0}&apos; with property.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.RepresentsAnObjectWhoseOperations">
            <summary>
              Looks up a localized string similar to Represents an object whose operations will be resolved at runtime..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.RequestedAssemblyAlreadyLoaded">
            <summary>
              Looks up a localized string similar to Requested assembly already loaded from &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Returns">
            <summary>
              Looks up a localized string similar to Returns:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.SearchedInDirectories">
            <summary>
              Looks up a localized string similar to Searched in directories:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.SearchedInDirectory">
            <summary>
              Looks up a localized string similar to Searched in directory:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.SetLargeFieldsToNullTodo">
            <summary>
              Looks up a localized string similar to TODO: set large fields to null..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.SimplifyMemberAccess">
            <summary>
              Looks up a localized string similar to Simplify Member Access.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.SimplifyNames">
            <summary>
              Looks up a localized string similar to Simplify Names.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.SimplifyThisOrMe">
            <summary>
              Looks up a localized string similar to Remove &apos;this&apos; or &apos;Me&apos; Qualification.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.SpecifiedFileNotFound">
            <summary>
              Looks up a localized string similar to Specified file not found..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.SpecifiedFileNotFoundFormat">
            <summary>
              Looks up a localized string similar to Specified file not found: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Summary">
            <summary>
              Looks up a localized string similar to Summary:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.SuppressionCodeActionTitle">
            <summary>
              Looks up a localized string similar to Suppress {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.SuppressionPendingJustification">
            <summary>
              Looks up a localized string similar to &lt;Pending&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.SuppressWithGlobalSuppressMessage">
            <summary>
              Looks up a localized string similar to in Suppression File.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.SuppressWithPragma">
            <summary>
              Looks up a localized string similar to in Source.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.TextForSystemVoid">
            <summary>
              Looks up a localized string similar to no value..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.TheAddressOfAVariableIsUsed">
            <summary>
              Looks up a localized string similar to The address of a variable is used inside the selected code..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.TheMemberIsDefinedInMetadata">
            <summary>
              Looks up a localized string similar to The member is defined in metadata..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.TheSymbolDoesNotHaveAnIcon">
            <summary>
              Looks up a localized string similar to The symbol does not have an icon..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ThisSignatureDoesNotContainParametersThatCanBeChanged">
            <summary>
              Looks up a localized string similar to This signature does not contain parameters that can be changed..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ThisSymbolHasRelatedDefinitionsOrReferencesInMetadata">
             <summary>
               Looks up a localized string similar to This symbol has related definitions or references in metadata. Changing its signature may result in build errors.
            
            Do you want to continue?.
             </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.ToDetectRedundantCalls">
            <summary>
              Looks up a localized string similar to To detect redundant calls.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.TriageCodeActionTitleForTriagedDiagnostic">
            <summary>
              Looks up a localized string similar to Re-triage {0}(currently &apos;{1}&apos;).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.TypeConstraint">
            <summary>
              Looks up a localized string similar to type constraint.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.TypeHelpForMoreInformation">
            <summary>
              Looks up a localized string similar to Type &quot;#help&quot; for more information..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.TypeParameter">
            <summary>
              Looks up a localized string similar to type parameter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.TypeParameterIsHiddenByAnother">
            <summary>
              Looks up a localized string similar to Type parameter &apos;{0}&apos; is hidden by another type parameter &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.TypeParameters">
            <summary>
              Looks up a localized string similar to Type parameters:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UnableToCreateHostingProcess">
            <summary>
              Looks up a localized string similar to Unable to create hosting process..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UnexpectedInterfaceMemberKind">
            <summary>
              Looks up a localized string similar to Unexpected interface member kind: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.Unknown">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UnknownSymbolKind">
            <summary>
              Looks up a localized string similar to Unknown symbol kind.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UnsupportedDiagnosticReported">
            <summary>
              Looks up a localized string similar to Reported diagnostic with ID &apos;{0}&apos; is not supported by the analyzer..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingAnActiveStatement">
            <summary>
              Looks up a localized string similar to Updating an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingAStatementAroundActive">
            <summary>
              Looks up a localized string similar to Updating a &apos;{0}&apos; statement around an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingAStatementContainingAwaitExpression">
            <summary>
              Looks up a localized string similar to Updating a complex statement containing an await expression will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingAWillPrevent">
            <summary>
              Looks up a localized string similar to Updating &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingStateMachineMethodAroundActive">
            <summary>
              Looks up a localized string similar to Updating async or iterator modifier around an active statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheAliasOfDeclareStatement">
            <summary>
              Looks up a localized string similar to Updating the alias of Declare Statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheBaseClassAndOrInterfaceOf">
            <summary>
              Looks up a localized string similar to Updating the base class and/or base interface(s) of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheHandlesClause">
            <summary>
              Looks up a localized string similar to Updating the Handles clause of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheImplementsClause">
            <summary>
              Looks up a localized string similar to Updating the Implements clause of a &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheInitializerOf">
            <summary>
              Looks up a localized string similar to Updating the initializer of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheKindOfAccessor">
            <summary>
              Looks up a localized string similar to Updating the kind of an property/event accessor will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheKindOfField">
            <summary>
              Looks up a localized string similar to Updating a field to an event or vice versa will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheKindOfMethod">
            <summary>
              Looks up a localized string similar to Updating the kind of a method (Sub/Function) will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheKindOfType">
            <summary>
              Looks up a localized string similar to Updating the kind of a type will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheLibraryNameOfDeclareStatement">
            <summary>
              Looks up a localized string similar to Updating the library name of Declare Statement will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheModifiersOf">
            <summary>
              Looks up a localized string similar to Updating the modifiers of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheSizeOf">
            <summary>
              Looks up a localized string similar to Updating the size of a &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheTypeOf">
            <summary>
              Looks up a localized string similar to Updating the type of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheUnderlyingTypeOf">
            <summary>
              Looks up a localized string similar to Updating the underlying type of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UpdatingTheVarianceOf">
            <summary>
              Looks up a localized string similar to Updating the variance of &apos;{0}&apos; will prevent the debug session from continuing..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UseAutoProperty">
            <summary>
              Looks up a localized string similar to Use auto property.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UserDiagnosticAnalyzerFailure">
            <summary>
              Looks up a localized string similar to User Diagnostic Analyzer Failure..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UserDiagnosticAnalyzerThrows">
            <summary>
              Looks up a localized string similar to Analyzer &apos;{0}&apos; threw an exception of type &apos;{1}&apos; with message &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UserDiagnosticAnalyzerThrowsDescription">
             <summary>
               Looks up a localized string similar to Analyzer &apos;{0}&apos; threw the following exception:
            &apos;{1}&apos;..
             </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.UseTheNavigationBarToSwitchContext">
            <summary>
              Looks up a localized string similar to You can use the navigation bar to switch context..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.WRN_AnalyzerCannotBeCreated">
            <summary>
              Looks up a localized string similar to An instance of analyzer {0} cannot be created from {1}: {2}..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.WRN_NoAnalyzerInAssembly">
            <summary>
              Looks up a localized string similar to The assembly {0} does not contain any analyzers..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.WRN_UnableToLoadAnalyzer">
            <summary>
              Looks up a localized string similar to Unable to load Analyzer assembly {0}: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.FeaturesResources.YouCanOnlyChangeTheSignatureOfAConstructorIndexerMethodOrDelegate">
            <summary>
              Looks up a localized string similar to You can only change the signature of a constructor, indexer, method or delegate..
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Navigation.NavigationOptions.PreferProvisionalTab">
            <summary>
            This option can be passed to the <see cref="T:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService"/> APIs to request that a provisional (or preview) tab 
            be used for any document that needs to be opened, if one is available.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService.CanNavigateToSpan(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Determines whether it is possible to navigate to the given position in the specified document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService.CanNavigateToLineAndOffset(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Int32,System.Int32)">
            <summary>
            Determines whether it is possible to navigate to the given line/offset in the specified document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService.CanNavigateToPosition(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Int32,System.Int32)">
            <summary>
            Determines whether it is possible to navigate to the given virtual position in the specified document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService.TryNavigateToSpan(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Navigates to the given position in the specified document, opening it if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService.TryNavigateToLineAndOffset(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Int32,System.Int32,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Navigates to the given line/offset in the specified document, opening it if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.IDocumentNavigationService.TryNavigateToPosition(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Int32,System.Int32,Microsoft.CodeAnalysis.Options.OptionSet)">
            <summary>
            Navigates to the given virtual position in the specified document, opening it if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.ISymbolNavigationService.TryNavigateToSymbol(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Navigate to the first source location of a given symbol.
            </summary>
            <param name="project">A project context with which to generate source for symbol
            if it has no source locations</param>
            <param name="symbol">The symbol to navigate to</param>
            <param name="options">A set of options. If these options are not supplied the
            current set of options from the project's workspace will be used.</param>
            <param name="cancellationToken">The token to check for cancellation</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.ISymbolNavigationService.TrySymbolNavigationNotify(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution)">
            <returns>True if the navigation was handled, indicating that the caller should not 
            perform the navigation.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Navigation.ISymbolNavigationService.WouldNavigateToSymbol(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.String@,System.Int32@,System.Int32@)">
            <returns>True if the navigation would be handled.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.RemoveUnnecessaryImports.IRemoveUnnecessaryImportsService.RemoveUnnecessaryImportsAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <returns>Returns the rewritten document, or the document passed in if no changes were made. If cancellation
            was observed, it returns null.</returns>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Options.OrganizerOptions.WarnOnBuildErrors">
            <summary>
            This option is currently unused by Roslyn, but we might want to implement it in the 
            future. Keeping the option while it's unimplemented allows all upgrade paths to 
            maintain any customized value for this setting, even through versions that have not
            implemented this feature yet.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Options.ServiceComponentOnOffOptions">
            <summary>
            options to indicate whether a certain component in Roslyn is enabled or not
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.LinkedFilesSymbolEquivalenceComparer">
            <summary>
            For completion and quickinfo in linked files, we compare symbols from different documents
            to determine if they are similar enough for us to suppress the platform dependence
            warning icon. We consider symbols equivalent if they have the same name and kind.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatch.CamelCaseWeight">
            <summary>
            The weight of a CamelCase match. A higher number indicates a more accurate match.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatch.IsCaseSensitive">
            <summary>
            True if this was a case sensitive match.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatch.Kind">
            <summary>
            The type of match that occurred.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatcher">
            <summary>
            The pattern matcher is thread-safe.  However, it maintains an internal cache of
            information as it is used.  Therefore, you should not keep it around forever and should get
            and release the matcher appropriately once you no longer need it.
            Also, while the pattern matcher is culture aware, it uses the culture specified in the
            constructor.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatcher.#ctor(System.String,System.Boolean)">
            <summary>
            Construct a new PatternMatcher using the calling thread's culture for string searching and comparison.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatcher.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Construct a new PatternMatcher using the specified culture.
            </summary>
            <param name="pattern">The pattern to make the pattern matcher for.</param>
            <param name="culture">The culture to use for string searching and comparison.</param>
            <param name="verbatimIdentifierPrefixIsWordCharacter">Whether to consider "@" as a word character</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatcher.GetMatches(System.String)">
            <summary>
            Determines if a given candidate string matches under a multiple word query text, as you
            would find in features like Navigate To.
            </summary>
            <param name="candidate">The word being tested.</param>
            <returns>If this was a match, a set of match types that occurred while matching the
            patterns. If it was not a match, it returns null.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatcher.GetMatches(System.String,System.String)">
            <summary>
            Matches a pattern against a candidate, and an optional dotted container for the 
            candidate. If the container is provided, and the pattern itself contains dots, then
            the pattern will be tested against the candidate and container.  Specifically,
            the part of the pattern after the last dot will be tested against the candidate. If
            a match occurs there, then the remaining dot-separated portions of the pattern will
            be tested against every successive portion of the container from right to left.
            
            i.e. if you have a pattern of "Con.WL" and the candidate is "WriteLine" with a 
            dotted container of "System.Console", then "WL" will be tested against "WriteLine".
            With a match found there, "Con" will then be tested against "Console".
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatcher.GetFirstMatch(System.String)">
            <summary>
            Determines if a given candidate string matches under a multiple word query text, as you
            would find in features like Navigate To.
            </summary>
            <remarks>
            PERF: This is slightly faster and uses less memory than <see cref="M:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatcher.GetMatches(System.String)"/>
            so, unless you need to know the full set of matches, use this version.
            </remarks>
            <param name="candidate">The word being tested.</param>
            <returns>If this was a match, the first element of the set of match types that occurred while matching the
            patterns. If it was not a match, it returns null.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatcher.MatchSegment(System.String,Microsoft.CodeAnalysis.Shared.Utilities.PatternMatcher.Segment,System.Boolean,Microsoft.CodeAnalysis.Shared.Utilities.PatternMatch[]@)">
            <summary>
            Internal helper for MatchPatternInternal
            </summary>
            <remarks>
            PERF: Designed to minimize allocations in common cases.
            If there's no match, then null is returned.
            If there's a single match, or the caller only wants the first match, then it is returned (as a Nullable)
            If there are multiple matches, and the caller wants them all, then a List is allocated.
            </remarks>
            <param name="candidate">The word being tested.</param>
            <param name="segment">The segment of the pattern to check against the candidate.</param>
            <param name="wantAllMatches">Does the caller want all matches or just the first?</param>
            <param name="allMatches">If <paramref name="wantAllMatches"/> is true, and there's more than one match, then the list of all matches.</param>
            <returns>If there's only one match, then the return value is that match. Otherwise it is null.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatcher.PartStartsWith(System.String,Microsoft.CodeAnalysis.Text.TextSpan,System.String,Microsoft.CodeAnalysis.Text.TextSpan,System.Globalization.CompareOptions)">
            <summary>
            Do the two 'parts' match? i.e. Does the candidate part start with the pattern part?
            </summary>
            <param name="candidate">The candidate text</param>
            <param name="candidatePart">The span within the <paramref name="candidate"/> text</param>
            <param name="pattern">The pattern text</param>
            <param name="patternPart">The span within the <paramref name="pattern"/> text</param>
            <param name="compareOptions">Options for doing the comparison (case sensitive or not)</param>
            <returns>True if the span identified by <paramref name="candidatePart"/> within <paramref name="candidate"/> starts with
            the span identified by <paramref name="patternPart"/> within <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatcher.PartStartsWith(System.String,Microsoft.CodeAnalysis.Text.TextSpan,System.String,System.Globalization.CompareOptions)">
            <summary>
            Does the given part start with the given pattern?
            </summary>
            <param name="candidate">The candidate text</param>
            <param name="candidatePart">The span within the <paramref name="candidate"/> text</param>
            <param name="pattern">The pattern text</param>
            <param name="compareOptions">Options for doing the comparison (case sensitive or not)</param>
            <returns>True if the span identified by <paramref name="candidatePart"/> within <paramref name="candidate"/> starts with <paramref name="pattern"/></returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatchKind">
            <summary>
            Note(cyrusn): this enum is ordered from strongest match type to weakest match type.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatchKind.Exact">
            <summary>
            The candidate string matched the pattern exactly.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatchKind.Prefix">
            <summary>
            The pattern was a prefix of the candidate string.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatchKind.Substring">
            <summary>
            The pattern was a substring of the candidate string, but in a way that wasn't a CamelCase match.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Shared.Utilities.PatternMatchKind.CamelCase">
            <summary>
            The pattern matched the CamelCased candidate string.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationListener.DiagnosticAsyncToken">
            <summary>
            Stores the source information for an <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsyncToken"/> value.  Helpful when 
            tracking down tokens which aren't properly disposed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Shared.TestHooks.FeatureMetadata">
            <summary>
            This interface declares a contract for MEF to import metadata in a strongly-typed fashion.
            The name of the interface is unimportant, only the property names and types are important.
            This interface matches the Roslyn.Services.Threading.FeatureAttribute's public properties.
            Whatever you specify in a feature like this [Feature("Outlining")] will become available in
            this interface's properties (FeatureName will be set to "Outlining")
            </summary>
            <remarks>A good link is: http://mef.codeplex.com/wikipage?title=Exports%20and%20Metadata
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Shared.TestHooks.AsynchronousOperationWaiter.WaitAllAsync(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationWaiter})">
            <summary>
            Wait for all of the <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationWaiter"/> instances to finish their
            work.
            </summary>
            <remarks>
            This is a very handy method for debugging hangs in the unit test.  Set a break point in the 
            loop, dig into the waiters and see all of the active <see cref="T:Microsoft.CodeAnalysis.Shared.TestHooks.IAsyncToken"/> values 
            representing the remaining work.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.MetadataAsSource.AbstractMetadataAsSourceService.GetFormattingRules(Microsoft.CodeAnalysis.Document)">
            <summary>
            provide formatting rules to be used when formatting MAS file
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.MetadataAsSource.AbstractMetadataAsSourceService.AddAssemblyInfoRegionAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Prepends a region directive at the top of the document with a name containing
            information about the assembly and a comment inside containing the path to the
            referenced assembly.  The containing assembly may not have a path on disk, in which case
            a string similar to "location unknown" will be placed in the comment inside the region
            instead of the path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.MetadataAsSource.IMetadataAsSourceService.AddSourceToAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Generates formatted source code containing general information about the symbol's
            containing assembly, and the public, protected, and protected-or-internal interface of
            which the given ISymbol is or is a part of into the given document
            </summary>
            <param name="document">The document to generate source into</param>
            <param name="symbol">The symbol whose interface to generate source for</param>
            <param name="cancellationToken">To cancel document operations</param>
            <returns>The updated document</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.MetadataAsSource.MetadataAsSourceHelpers">
            <summary>
            Helpers shared by both the text service and the editor service
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Notification.INotificationService.SendNotification(System.String,System.String,Microsoft.CodeAnalysis.Notification.NotificationSeverity)">
            <summary>
            Displays a message box with an OK button to the user.
            </summary>
            <param name="message">The message shown within the message box.</param>
            <param name="title">The title bar to be shown in the message box. May be ignored by some implementations.</param>
            <param name="severity">The severity of the message.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Notification.INotificationService.ConfirmMessageBox(System.String,System.String,Microsoft.CodeAnalysis.Notification.NotificationSeverity)">
            <summary>
            Displays a message box with a yes/no question to the user.
            </summary>
            <param name="message">The message shown within the message box.</param>
            <param name="title">The title bar to be shown in the message box. May be ignored by some implementations.</param>
            <param name="severity">The severity of the message.</param>
            <returns>true if yes was clicked, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Organizing.IOrganizingService">
            <summary>
            internal interface used to use language specific service from common service layer
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Organizing.IOrganizingService.GetDefaultOrganizers">
            <summary>
            return default organizers
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Organizing.IOrganizingService.OrganizeAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Organizing.Organizers.ISyntaxOrganizer},System.Threading.CancellationToken)">
            <summary>
            Organize document
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Organizing.Organizers.ISyntaxOrganizer.SyntaxNodeTypes">
            <summary>
            syntax node types this organizer is applicable to
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Organizing.Organizers.ISyntaxOrganizer.OrganizeNode(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            organize given node
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Organizing.OrganizingService.OrganizeAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Organizing.Organizers.ISyntaxOrganizer},System.Threading.CancellationToken)">
            <summary>
            Organize the whole document.
            
            Optionally you can provide your own organizers. otherwise, default will be used.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ProjectManagement.IProjectManagementService">
            <summary>
            This service provides a way to extract all the folders under a given project, or find the default namespace if it exists.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer.DocumentResetAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Resets all the document state cached by the analyzer.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerProgressReporter">
            <summary>
            Provide a way to see whether solution crawler is started or not
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerProgressReporter.InProgress">
            <summary>
            Return true if solution crawler is in progress.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerProgressReporter.Started">
            <summary>
            Raised when there is pending work in solution crawler.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerProgressReporter.Stopped">
            <summary>
            Raised when there is no more pending work in solution crawler.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerService">
            <summary>
            Provide a way to control solution crawler.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerService.Reanalyze(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ProjectId},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId})">
            <summary>
            Ask solution crawler to re-analyze given <see cref="T:Microsoft.CodeAnalysis.ProjectId"/>s or/and <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s 
            in given <see cref="T:Microsoft.CodeAnalysis.Workspace"/> with given <see cref="T:Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerService.GetProgressReporter(Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Get <see cref="T:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerProgressReporter"/> for the given <see cref="T:Microsoft.CodeAnalysis.Workspace"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.IWorkCoordinatorPriorityService.IsLowPriorityAsync(Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            True if this document is less important than other documents in the project it is 
            contained in, and should have work scheduled for it happen after all other documents
            in the project.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerRegistrationService">
            <summary>
            Register a solution crawler for a particular workspace
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.SolutionCrawlerProgressReporter">
            <summary>
            Progress reporter
            
            initial implementation doesn't care about each specific item's progress. 
            but as a whole whether there is anything going on. later if there is any need to track each item's progress specifically such as
            higher/normal/lower queue, then we can change this to track those separately.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.NullReporter">
            <summary>
            reporter that doesn't do anything
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService.SolutionCrawlerService">
            <summary>
            nested class of <see cref="T:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerRegistrationService"/> since it is tightly coupled with it.
            
            <see cref="T:Microsoft.CodeAnalysis.SolutionCrawler.ISolutionCrawlerService"/> is implemented by this class since WorkspaceService doesn't allow a class to implement
            more than one <see cref="T:Microsoft.CodeAnalysis.Host.IWorkspaceService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.IDocumentTrackingService.GetActiveDocument">
            <summary>
            Get the <see cref="T:Microsoft.CodeAnalysis.DocumentId"/> of the active document. May be null if there is no active document
            or the active document is not in the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.IDocumentTrackingService.GetVisibleDocuments">
            <summary>
            Get a read only collection of the <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of all the visible documents in the workspace.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.IDocumentTrackingService.NonRoslynBufferTextChanged">
            <summary>
            Events for Non Roslyn text buffer changes.
            
            It raises events for buffers opened in a view in host.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.DeclarationInfo">
            <summary>
            Struct containing information about a source declaration.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DeclarationInfo.DeclaredNode">
            <summary>
            Topmost syntax node for this declaration.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DeclarationInfo.ExecutableCodeBlocks">
            <summary>
            Syntax nodes for executable code blocks (method body, initializers, etc.) associated with this declaration.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.DeclarationInfo.DeclaredSymbol">
            <summary>
            Symbol declared by this declaration.
            </summary>
        </member>
    </members>
</doc>
